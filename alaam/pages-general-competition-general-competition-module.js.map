{"version":3,"sources":["./src/app/pages/general-competition/add/add-gc.component.html","./src/app/pages/general-competition/general-competition.component.html","./src/app/pages/general-competition/add/add-gc.component.scss","./src/app/pages/general-competition/add/add-gc.component.ts","./src/app/pages/general-competition/general-competition-routing.module.ts","./src/app/pages/general-competition/general-competition.component.ts","./src/app/pages/general-competition/general-competition.module.ts"],"names":[],"mappings":"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","file":"pages-general-competition-general-competition-module.js","sourcesContent":["export default \"<div class=\\\"container-fluid single-curriculum\\\">\\r\\n \\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12 single-curriculum-wrap\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n          <h4>General Competition</h4>\\r\\n\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"row\\\">\\r\\n        <ul class=\\\"nav nav-tabs\\\">\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link active\\\" (click)=\\\"uploadType('single')\\\" data-toggle=\\\"tab\\\" href=\\\"#single\\\">Single Upload</a>\\r\\n          </li>\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" (click)=\\\"uploadType('bulk')\\\" data-toggle=\\\"tab\\\" href=\\\"#bulk\\\">Bulk Upload</a>\\r\\n          </li>\\r\\n        </ul>\\r\\n      </div>\\r\\n      <div class=\\\"tab-content\\\">\\r\\n        <div id=\\\"bulk\\\" class=\\\"container tab-pane active\\\" *ngIf=\\\"isBulk\\\">\\r\\n          <div class=\\\"row\\\" *ngIf=\\\"isSave\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <div class=\\\"col-md-12\\\">\\r\\n                <form class=\\\"md-float-material\\\" [formGroup]=\\\"formVar\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n                  <div class=\\\"row file-upload\\\">\\r\\n                     <div class=\\\"card-block col-sm-6 col-sm-6 col-md-6\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n\\r\\n                        <label>Heading</label>\\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"heading\\\" [ngClass]=\\\"{ 'is-invalid': submitted && fv.heading.errors }\\\" (change)=\\\"changedHeading($event.target.value)\\\">\\r\\n                          <option value=\\\"\\\">Heading</option>\\r\\n                          <option *ngFor=\\\"let option of headingArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && fv.heading.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"fv.heading.errors.required\\\">heading is required.</div>\\r\\n                            <div *ngIf=\\\"fv.heading.errors.pattern\\\">Accept numeric values only.</div>\\r\\n                        </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                  <div class=\\\"card-block col-sm-6 col-sm-6 col-md-6\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <label>Category</label>\\r\\n                        \\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"category\\\" [ngClass]=\\\"{ 'is-invalid': submitted && fv.category.errors }\\\">\\r\\n                          <option value=\\\"\\\">Category</option>\\r\\n                          <option *ngFor=\\\"let option of categoryArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && fv.category.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"fv.category.errors.required\\\">Category is required.</div>\\r\\n                          </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                    <div class=\\\"col-md-6\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n                      Upload xlsx file\\r\\n                    </div>\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <input #variable accept=\\\".xlsx\\\" (change)=\\\"fileChangeXlsx($event, variable)\\\" type=\\\"file\\\" class=\\\"form-control choosefiles\\\" formControlName=\\\"excelFile\\\">\\r\\n                      </div>\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <a href=\\\"assets/file/gc_format.xlsx\\\"> \\r\\n                          Sample Quiz\\r\\n                        <img class=\\\"img-fluid\\\" width=\\\"20\\\" height=\\\"18\\\" alt=\\\" \\\" src=\\\"assets/images/sample-quiz.jpg\\\"> </a>\\r\\n                      </div>\\r\\n\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-6\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n                      Upload image/video Zip file\\r\\n                    </div>\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <input #variable1 accept=\\\".zip\\\" (change)=\\\"fileChangeZip($event, variable1)\\\" type=\\\"file\\\" class=\\\"form-control choosefiles\\\" formControlName=\\\"zipFile\\\">\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"group do-u-have-img\\\">\\r\\n                        Do you have image/video? <input type=\\\"checkbox\\\" formControlName=\\\"existImage\\\" value=\\\"Yes\\\" (change)=\\\"eventCheck($event)\\\"> Yes\\r\\n\\r\\n                      </div>\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                          <!-- Progress Bar --> \\r\\n                          <div class=\\\"progress form-group\\\" *ngIf=\\\"percentDone\\\">\\r\\n                              <div class=\\\"progress-bar progress-bar-striped bg-success\\\" role=\\\"progressbar\\\"\\r\\n                                [style.width.%]=\\\"percentDone\\\">\\r\\n                              </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                        <!-- spinnner element is defined with id loading -->\\r\\n                          <div class=\\\"justify-content-center\\\" id=\\\"loading-s\\\" style=\\\"display: none !important\\\"> \\r\\n                              <div class=\\\"spinner-border\\\" role=\\\"status\\\"> \\r\\n                                  <span class=\\\"sr-only\\\" id=\\\"loading\\\"></span> \\r\\n                              </div> \\r\\n                          </div>\\r\\n                        \\r\\n                         <button type=\\\"button\\\" class=\\\"btn allam-btn-green text-white\\\" (click)=\\\"upload()\\\" id=\\\"btnUpload\\\"><span *ngIf=\\\"loading2\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span> Upload</button>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </form>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div *ngIf=\\\"isError\\\" class=\\\"bulk_table_fullw\\\">\\r\\n                <div class=\\\"card-block col-sm-12 col-xs-12 col-md-12\\\">\\r\\n                  <div class=\\\"publish-table-wrap table-responsive\\\">\\r\\n                    <h1>Following data is having errors:</h1>\\r\\n                      <table width=\\\"100%\\\" class=\\\"table table-striped table-bordered nowrap dataTable\\\" border=\\\"1\\\">\\r\\n                        <thead>\\r\\n                          <tr>\\r\\n                            \\r\\n                            <th width=\\\"10%\\\">Question</th>\\r\\n                            <!-- <th width=\\\"10%\\\">Question File Url</th> -->\\r\\n                            <th width=\\\"10%\\\">Answer</th>\\r\\n                            <th width=\\\"10%\\\">Option A</th>\\r\\n                            <th width=\\\"10%\\\">Option B</th>\\r\\n                            <th width=\\\"10%\\\">Option C</th>\\r\\n                            <th width=\\\"10%\\\">Option D</th>\\r\\n                            <th width=\\\"10%\\\">Level</th>\\r\\n                            <th width=\\\"10%\\\">Notes</th>\\r\\n                            <th width=\\\"10%\\\">Remarks</th>\\r\\n                            \\r\\n                          </tr>\\r\\n                        </thead>\\r\\n                        <tbody>\\r\\n                          <tr *ngFor=\\\"let item of errorData\\\">\\r\\n                            \\r\\n                            <td width=\\\"10%\\\">{{ item.question }}</td>\\r\\n                            <!-- <td width=\\\"10%\\\">{{ item.question_file_url }}</td> -->\\r\\n                            <td width=\\\"10%\\\">{{ item.answer }}</td>\\r\\n                            <td width=\\\"10%\\\">{{ item.option1 }}</td>\\r\\n                            <td width=\\\"10%\\\">{{ item.option2 }}</td>\\r\\n                            <td width=\\\"10%\\\">{{ item.option3 }}</td>\\r\\n                            <td width=\\\"10%\\\">{{ item.option4 }}</td>\\r\\n                            <td width=\\\"10%\\\">{{ item.level }}</td>\\r\\n                            <td width=\\\"10%\\\">{{ item.notes }}</td>\\r\\n                            <td [innerHTML]=\\\"item.Remarks\\\" width=\\\"15%\\\"></td>\\r\\n                          </tr>\\r\\n                        </tbody>\\r\\n                      </table>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div *ngIf=\\\"isProcessed && questionArr.length >0\\\" class=\\\"bulk_table_fullw\\\">\\r\\n                      <div class=\\\"card-block col-sm-12 col-xs-12 col-md-12\\\">\\r\\n                        <div class=\\\"publish-table-wrap table-responsive\\\">\\r\\n                          <table id=\\\"autofill\\\" class=\\\"table table-striped table-bordered table-sm dataTable no-footer\\\" role=\\\"grid\\\" aria-describedby=\\\"autofill_info\\\">\\r\\n                            <thead>\\r\\n                              <tr>\\r\\n                                <th>Level</th>\\r\\n                                <th>Answer</th>\\r\\n                                <th><span class=\\\"option-width\\\">Option D </span></th>\\r\\n                                <th><span class=\\\"option-width\\\">Option C </span></th>\\r\\n                                <th><span class=\\\"option-width\\\">Option B </span></th>\\r\\n                                <th><span class=\\\"option-width\\\">Option A </span></th>\\r\\n                                <th>Question Type </th>\\r\\n                                <th>Question </th>\\r\\n                                <th>Duration</th>\\r\\n                                <th>Heading</th>\\r\\n                                <th>Category</th>\\r\\n                                <th>Edit </th>\\r\\n                                <th>Delete </th>\\r\\n                                <th><button class=\\\"btn allam-btn btn-warning\\\" (click)=\\\"deletItem()\\\" title=\\\"Delete\\\" type=\\\"button\\\"><i class=\\\"icofont icofont-ui-delete\\\"></i></button> <!-- <button (click)=\\\"deleteFoodSelected()\\\">DeleteSelectedFood</button> --></th>\\r\\n\\r\\n                                <!--  <th>Image/Video URL</th> -->\\r\\n                                \\r\\n                              </tr>\\r\\n                            </thead>\\r\\n                            <tbody>\\r\\n                              <tr *ngFor=\\\"let item of questionArr\\\">\\r\\n                                <td class=\\\"\\\">{{ item.level }}</td>\\r\\n                                <td class=\\\"\\\">{{ item.answer }}</td>\\r\\n                                <td class=\\\"\\\">{{ item.option4 }}</td>\\r\\n                                <td class=\\\"\\\">{{ item.option3 }} </td>\\r\\n                                <td class=\\\"\\\">{{ item.option2 }} </td>\\r\\n                                <td class=\\\"\\\">{{ item.option1 }} </td>\\r\\n                                <td class=\\\"\\\">{{ item.file_type }}</td> \\r\\n                                <td>\\r\\n                                  <div *ngIf=\\\"item.qui_type=='text'\\\">\\r\\n                                    {{item.question}}\\r\\n                                  </div>\\r\\n                                    <div  *ngIf=\\\"item.qui_type=='image'\\\">\\r\\n                                      <img style=\\\"width: 400px;height: 300px\\\" src=\\\"{{local_api_url+item.question_image}}\\\">\\r\\n                                    </div>\\r\\n                                    <div *ngIf=\\\"item.qui_type=='text_and_image'\\\">\\r\\n                                      <img style=\\\"width: 400px;height: 300px\\\" src=\\\"{{local_api_url+item.question_image}}\\\">\\r\\n                                      <br>{{item.question}}\\r\\n                                    </div>\\r\\n                                    <div *ngIf=\\\"item.qui_type=='video'\\\">\\r\\n                                      <video *ngIf=\\\"item.question_image=='live'\\\" style=\\\"width:285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                                          <source src=\\\"{{s3_url+item.question_image_url}}\\\" type=\\\"video/mp4\\\" />\\r\\n                                          Browser not supported\\r\\n                                      </video>\\r\\n                                       <video *ngIf=\\\"item.question_image!='live'\\\" style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                                          <source src=\\\"{{local_api_url+item.question_image}}\\\" type=\\\"video/mp4\\\" />\\r\\n                                          Browser not supported\\r\\n                                      </video>\\r\\n                                    </div>\\r\\n                                    <div *ngIf=\\\"item.qui_type=='text_and_video'\\\">\\r\\n                                      <video *ngIf=\\\"item.question_image=='live'\\\" style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                                          <source src=\\\"{{s3_url+item.question_image_url}}\\\" type=\\\"video/mp4\\\" />\\r\\n                                          Browser not supported\\r\\n                                      </video>\\r\\n                                       <video *ngIf=\\\"item.question_image!='live'\\\" style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                                          <source src=\\\"{{local_api_url+item.question_image}}\\\" type=\\\"video/mp4\\\" />\\r\\n                                          Browser not supported\\r\\n                                      </video>\\r\\n                                      <br>{{item.question}}\\r\\n                                    </div>\\r\\n                                </td>\\r\\n                                <td class=\\\"\\\">{{ item.duration }}</td>\\r\\n                                <td class=\\\"\\\">{{ item.header_name }}</td>\\r\\n                                <td class=\\\"\\\">{{ item.category_name }}</td>\\r\\n                                <td><button type=\\\"button\\\" class=\\\"btn allam-btn btn-success\\\" (click)=\\\"editItem(item)\\\"><i class=\\\"icofont icofont-ui-edit\\\"></i> </button></td>\\r\\n                                <td class=\\\"\\\">\\r\\n                                  <button class=\\\"btn allam-btn btn-warning\\\" (click)=\\\"deleteOneItem(item.id,'bulk')\\\" title=\\\"delete\\\" type=\\\"button\\\"><i class=\\\"icofont icofont-ui-delete\\\"></i></button>\\r\\n                                </td>\\r\\n                                <td class=\\\"categories\\\"><input type=\\\"checkbox\\\"  name=\\\"del_row\\\" [value]=\\\"item.id\\\" (change)=\\\"onCheckboxChange($event,item.id)\\\" >\\r\\n                                 <!--  <input #{{item.id}} [(ngModel)]=\\\"item.selected\\\" type=\\\"checkbox\\\"> -->\\r\\n                                </td>\\r\\n\\r\\n                               <!--  <td> <span class=\\\"img-url-break\\\"> {{ item.question_image_url }}</span></td> -->\\r\\n\\r\\n                                \\r\\n                              </tr>\\r\\n                            </tbody>\\r\\n                          </table>\\r\\n                        </div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                          <div class=\\\"col-sm-12 col-xs-12 col-md-12\\\">\\r\\n                            <div class=\\\"m-t-15\\\">\\r\\n                                <button (click)=\\\"reUpload()\\\" class=\\\"btn btn-warning text-white round-border \\\" style=\\\"margin-right: 5px;\\\">\\r\\n                                  Cancel\\r\\n                                </button> \\r\\n                                <!-- <button (click)=\\\"onSubmitData()\\\" class=\\\"btn allam-btn-green text-white round-border \\\">\\r\\n                                  Publish\\r\\n                                </button> -->\\r\\n                                <button [disabled]=\\\"loading2\\\" class=\\\"btn allam-btn-green text-white round-border\\\"  (click)=\\\"publish()\\\">\\r\\n                                <span *ngIf=\\\"loading2\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                                   Publish\\r\\n                                </button>\\r\\n                            </div>\\r\\n                            \\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\" *ngIf=\\\"isEdit\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <form class=\\\"md-float-material\\\" [formGroup]=\\\"form\\\" enctype=\\\"multipart/form-data\\\" (ngSubmit)=\\\"onUpdateTemp()\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"card-block col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n\\r\\n                        <label>Heading</label>\\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"heading\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.heading.errors }\\\" (change)=\\\"changedHeading($event.target.value)\\\">\\r\\n                          <option value=\\\"\\\">Heading</option>\\r\\n                          <option *ngFor=\\\"let option of headingArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && f.heading.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.heading.errors.required\\\">heading is required.</div>\\r\\n                            <div *ngIf=\\\"f.heading.errors.pattern\\\">Accept numeric values only.</div>\\r\\n                        </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                  <div class=\\\"card-block col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <label>Category</label>\\r\\n                        \\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"category\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.category.errors }\\\">\\r\\n                          <option value=\\\"\\\">Category</option>\\r\\n                          <option *ngFor=\\\"let option of categoryArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && f.category.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.category.errors.required\\\">Category is required.</div>\\r\\n                          </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                   <div class=\\\"col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                     <div class=\\\"group\\\">\\r\\n                      <label>Question Type</label>\\r\\n                      <select class=\\\"form-control\\\" (change)=\\\"qtChanged($event.target.value)\\\" formControlName=\\\"question_type\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.question_type.errors }\\\">\\r\\n                          <option value=\\\"text\\\">Text</option>\\r\\n                          <option value=\\\"image\\\">Image</option>\\r\\n                          <option value=\\\"text_and_image\\\">Text and Image</option>\\r\\n                          <option value=\\\"video\\\">Video</option>\\r\\n                          <option value=\\\"text_and_video\\\">Text and Video</option>\\r\\n                      </select>\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.question_type.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f.question_type.errors.required\\\">Question Type is required.</div>\\r\\n\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n           \\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-lg-8 \\\">\\r\\n                    <div class=\\\"row \\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n                      \\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option A\\\" type=\\\"text\\\" formControlName=\\\"option1\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option1.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                        <div *ngIf=\\\"submitted && f.option1.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option1.errors.required\\\">Option A is required.</div>\\r\\n                         </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2  txt-left \\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"a\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'a'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n\\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option B\\\" type=\\\"text\\\" formControlName=\\\"option2\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option2.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option2.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option2.errors.required\\\">Option B is required.</div>\\r\\n                         </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2 txt-left\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"b\\\" formControlName=\\\"answer\\\"  [checked]=\\\"form.get('answer').value == 'b'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n\\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option C\\\" type=\\\"text\\\" formControlName=\\\"option3\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option3.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option3.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option3.errors.required\\\">Option C is required.</div>\\r\\n                        </div>\\r\\n\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"c\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'c'\\\"> \\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n                      \\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option D\\\" type=\\\"text\\\" formControlName=\\\"option4\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option4.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option4.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option4.errors.required\\\">Option D is required.</div>\\r\\n                        </div>\\r\\n\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\"  name=\\\"answer\\\" value=\\\"d\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'd'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10\\\">\\r\\n                         <div class=\\\"group\\\">\\r\\n                          <label>Level</label>\\r\\n                          <select class=\\\"form-control\\\" formControlName=\\\"level\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.level.errors }\\\">\\r\\n                            <option value=\\\"\\\">Level</option>\\r\\n                            <option *ngFor=\\\"let option of levelOptions\\\" [value]=\\\"option\\\" >{{option}}</option>\\r\\n                          </select>\\r\\n                          \\r\\n                          <span class=\\\"md-line\\\"></span>\\r\\n                           <div *ngIf=\\\"submitted && f.level.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.level.errors.required\\\">Level is required.</div>\\r\\n                              <div *ngIf=\\\"f.level.errors.pattern\\\">Accept numeric values only.</div>\\r\\n\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10\\\">\\r\\n                         <div class=\\\"group\\\">\\r\\n                          <label>Duration (In Seconds)</label>\\r\\n                          <select class=\\\"form-control\\\" formControlName=\\\"duration\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.duration.errors }\\\">\\r\\n                            <option value=\\\"\\\">Duration (In Seconds)</option>\\r\\n                            <option *ngFor=\\\"let option of durationOptions\\\" [value]=\\\"option\\\" >{{option}}</option>\\r\\n                          </select>\\r\\n                          \\r\\n                          <span class=\\\"md-line\\\"></span>\\r\\n                           <div *ngIf=\\\"submitted && f.duration.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.duration.errors.required\\\">Question time is required.</div>\\r\\n                              <div *ngIf=\\\"f.duration.errors.pattern\\\">Accept numeric values only.</div>\\r\\n\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 \\\">\\r\\n                        <div class=\\\"group\\\">\\r\\n                          <label>Note</label>\\r\\n                         <input class=\\\"form-control\\\" placeholder=\\\"Note\\\" type=\\\"text\\\" formControlName=\\\"note\\\" maxlength=\\\"70\\\">\\r\\n                         <span class=\\\"md-line\\\"></span>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 \\\">\\r\\n                        <div class=\\\"m-t-15\\\">\\r\\n                          <button (click)=\\\"goBack()\\\" [disabled]=\\\"loading\\\" class=\\\"btn btn-warning text-white round-border m-r-10 create_cancel\\\">\\r\\n                             <span *ngIf=\\\"this.idEdit\\\">Back</span>\\r\\n                          </button>\\r\\n                          \\r\\n                          <button [disabled]=\\\"loading\\\" class=\\\"btn allam-btn-green text-white round-border create_cancel\\\">\\r\\n                            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                             <span *ngIf=\\\"this.idEdit\\\">Update</span>\\r\\n                             \\r\\n                          </button>\\r\\n\\r\\n                        </div>\\r\\n                        \\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>  \\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-lg-4 \\\" *ngIf=\\\"question_type=='text'\\\">\\r\\n                  <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                   <label>Question</label>\\r\\n                    \\r\\n                    <textarea class=\\\"form-control\\\" placeholder=\\\"Question\\\" formControlName=\\\"question\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.question.errors }\\\"> </textarea>\\r\\n                    <span class=\\\"md-line\\\"></span>\\r\\n                    <div *ngIf=\\\"submitted && f.question.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.question.errors.required\\\">Question is required.</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              <div *ngIf=\\\"question_type=='image'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                 <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                    <div class=\\\" m-t-15\\\">\\r\\n                      <label>Upload Question </label>\\r\\n                        <input type=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"fileChangeEvent($event)\\\" accept=\\\"image/x-png,image/jpeg\\\" />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <div class=\\\"preview\\\" *ngIf=\\\"croppedImage!=local_api_url\\\">\\r\\n                      <img [src]=\\\"croppedImage\\\" />\\r\\n                    </div>\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div *ngIf=\\\"question_type=='text_and_image'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                 <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                    <div class=\\\" m-t-15\\\">\\r\\n                      <label>Upload Question </label>\\r\\n                        <input type=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"fileChangeEvent($event)\\\" accept=\\\"image/x-png,image/jpeg\\\" />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <div class=\\\"preview\\\" *ngIf=\\\"croppedImage!=local_api_url\\\">\\r\\n                      <img [src]=\\\"croppedImage\\\" />\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                     <label>Question Text</label>\\r\\n                      <textarea class=\\\"form-control\\\" placeholder=\\\"Question\\\" formControlName=\\\"question_text\\\" maxlength=\\\"70\\\" > </textarea>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                 <div *ngIf=\\\"question_type=='video'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" (change)=\\\"uploadVideo($event)\\\" class=\\\"form-control\\\" accept=\\\"video/mp4,video/x-m4v,video/*\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <video style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                          <source src=\\\"{{croppedImage}}\\\" type=\\\"video/mp4\\\" />\\r\\n                          Browser not supported\\r\\n                      </video>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='text_and_video'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" (change)=\\\"uploadVideo($event)\\\" class=\\\"form-control\\\" accept=\\\"video/mp4,video/x-m4v,video/*\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <video style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                          <source src=\\\"{{croppedImage}}\\\" type=\\\"video/mp4\\\" />\\r\\n                          Browser not supported\\r\\n                      </video>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                       <label>Question Text</label>\\r\\n                        <textarea class=\\\"form-control\\\" placeholder=\\\"Question\\\" formControlName=\\\"question_text\\\" maxlength=\\\"70\\\" > </textarea>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n              </div>\\r\\n\\r\\n              </form>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div id=\\\"single\\\" class=\\\"container tab-pane active\\\" *ngIf=\\\"isSingle\\\">\\r\\n          <div class=\\\"row\\\" *ngIf=\\\"isSave\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <form class=\\\"md-float-material\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSaveSingleTemp()\\\" enctype=\\\"multipart/form-data\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"card-block col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n\\r\\n                        <label>Heading</label>\\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"heading\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.heading.errors }\\\" (change)=\\\"changedHeading($event.target.value)\\\">\\r\\n                          <option value=\\\"\\\">Heading</option>\\r\\n                          <option *ngFor=\\\"let option of headingArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && f.heading.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.heading.errors.required\\\">heading is required.</div>\\r\\n                            <div *ngIf=\\\"f.heading.errors.pattern\\\">Accept numeric values only.</div>\\r\\n                        </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                  <div class=\\\"card-block col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <label>Category</label>\\r\\n                        \\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"category\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.category.errors }\\\">\\r\\n                          <option value=\\\"\\\">Category</option>\\r\\n                          <option *ngFor=\\\"let option of categoryArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && f.category.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.category.errors.required\\\">Category is required.</div>\\r\\n                          </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                  <div class=\\\"col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                     <div class=\\\"group\\\">\\r\\n                      <label>Question Type</label>\\r\\n                      <select class=\\\"form-control\\\" (change)=\\\"qtChanged($event.target.value)\\\" formControlName=\\\"question_type\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.question_type.errors }\\\">\\r\\n                          <option value=\\\"text\\\">Text</option>\\r\\n                          <option value=\\\"image\\\">Image</option>\\r\\n                          <option value=\\\"text_and_image\\\">Text and Image</option>\\r\\n                          <option value=\\\"video\\\">Video</option>\\r\\n                          <option value=\\\"text_and_video\\\">Text and Video</option>\\r\\n                      </select>\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.question_type.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f.question_type.errors.required\\\">Question Type is required.</div>\\r\\n\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n           \\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-lg-8 \\\">\\r\\n                    <div class=\\\"row \\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n                      \\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option A\\\" type=\\\"text\\\" formControlName=\\\"option1\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option1.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                        <div *ngIf=\\\"submitted && f.option1.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option1.errors.required\\\">Option A is required.</div>\\r\\n                         </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2  txt-left \\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"a\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'a'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n\\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option B\\\" type=\\\"text\\\" formControlName=\\\"option2\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option2.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option2.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option2.errors.required\\\">Option B is required.</div>\\r\\n                         </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2 txt-left\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"b\\\" formControlName=\\\"answer\\\"  [checked]=\\\"form.get('answer').value == 'b'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n\\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option C\\\" type=\\\"text\\\" formControlName=\\\"option3\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option3.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option3.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option3.errors.required\\\">Option C is required.</div>\\r\\n                        </div>\\r\\n\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"c\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'c'\\\"> \\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n                      \\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option D\\\" type=\\\"text\\\" formControlName=\\\"option4\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option4.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option4.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option4.errors.required\\\">Option D is required.</div>\\r\\n                        </div>\\r\\n\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\"  name=\\\"answer\\\" value=\\\"d\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'd'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10\\\">\\r\\n                         <div class=\\\"group\\\">\\r\\n                          <label>Level</label>\\r\\n                          <select class=\\\"form-control\\\" formControlName=\\\"level\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.level.errors }\\\">\\r\\n                            <option value=\\\"\\\">Level</option>\\r\\n                            <option *ngFor=\\\"let option of levelOptions\\\" [value]=\\\"option\\\" >{{option}}</option>\\r\\n                          </select>\\r\\n                          \\r\\n                          <span class=\\\"md-line\\\"></span>\\r\\n                           <div *ngIf=\\\"submitted && f.level.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.level.errors.required\\\">Level is required.</div>\\r\\n                              <div *ngIf=\\\"f.level.errors.pattern\\\">Accept numeric values only.</div>\\r\\n\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10\\\">\\r\\n                         <div class=\\\"group\\\">\\r\\n                          <label>Duration (In Seconds)</label>\\r\\n                          <select class=\\\"form-control\\\" formControlName=\\\"duration\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.duration.errors }\\\">\\r\\n                            <option value=\\\"\\\">Duration (In Seconds)</option>\\r\\n                            <option *ngFor=\\\"let option of durationOptions\\\" [value]=\\\"option\\\" >{{option}}</option>\\r\\n                          </select>\\r\\n                          \\r\\n                          <span class=\\\"md-line\\\"></span>\\r\\n                           <div *ngIf=\\\"submitted && f.duration.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.duration.errors.required\\\">Question time is required.</div>\\r\\n                              <div *ngIf=\\\"f.duration.errors.pattern\\\">Accept numeric values only.</div>\\r\\n\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 \\\">\\r\\n                        <div class=\\\"group\\\">\\r\\n                          <label>Note</label>\\r\\n                         <input class=\\\"form-control\\\" placeholder=\\\"Note\\\" type=\\\"text\\\" formControlName=\\\"note\\\" maxlength=\\\"70\\\">\\r\\n                         <span class=\\\"md-line\\\"></span>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 \\\">\\r\\n                        <div class=\\\"m-t-15\\\">\\r\\n                          <button [routerLink]=\\\"['/general-competition']\\\" [disabled]=\\\"loading\\\" class=\\\"btn btn-warning text-white round-border m-r-10 create_cancel\\\">\\r\\n                             <span>Back</span>\\r\\n                          </button>\\r\\n                          \\r\\n                          <button [disabled]=\\\"loading\\\" class=\\\"btn allam-btn-green text-white round-border create_cancel\\\">\\r\\n                            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                             <span>Save</span>\\r\\n                             \\r\\n                          </button>\\r\\n\\r\\n                        </div>\\r\\n                        \\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>  \\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-lg-4 \\\" *ngIf=\\\"question_type=='text'\\\">\\r\\n                    <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                     <label>Question</label>\\r\\n                      <ckeditor [editor]=\\\"Editor\\\" [data]='question_value' [config]=\\\"config\\\" (blur)=\\\"onChange($event)\\\"></ckeditor>\\r\\n                      <div class=\\\"question_note\\\">Note: your question should be in the limit of the text editor height and width. NO SCROLL BAR should be displayed as this will be out of the limit of the question maximum length.</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='image'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                    <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"fileChangeEvent($event)\\\" accept=\\\"image/x-png,image/jpeg\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"preview\\\" >\\r\\n                        <img [src]=\\\"croppedImage\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='text_and_image'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"fileChangeEvent($event)\\\" accept=\\\"image/x-png,image/jpeg\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"preview\\\" >\\r\\n                        <img [src]=\\\"croppedImage\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                       <label>Question Text</label>\\r\\n                        <textarea class=\\\"form-control\\\" placeholder=\\\"Question\\\" formControlName=\\\"question_text\\\" maxlength=\\\"70\\\" > </textarea>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='video'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" (change)=\\\"uploadVideo($event)\\\" class=\\\"form-control\\\" accept=\\\"video/mp4,video/x-m4v,video/*\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='text_and_video'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" (change)=\\\"uploadVideo($event)\\\" class=\\\"form-control\\\" accept=\\\"video/mp4,video/x-m4v,video/*\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                       <label>Question Text</label>\\r\\n                        <textarea class=\\\"form-control\\\" placeholder=\\\"Question\\\" formControlName=\\\"question_text\\\" maxlength=\\\"70\\\" > </textarea>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                </div>\\r\\n\\r\\n              </form>\\r\\n            </div>\\r\\n             <div class=\\\"row\\\">\\r\\n              <div *ngIf=\\\"isProcessed && questionArr.length >0\\\" class=\\\"bulk_table_fullw\\\">\\r\\n                  <div class=\\\"card-block col-sm-12 col-xs-12 col-md-12\\\">\\r\\n                    <div class=\\\"publish-table-wrap table-responsive\\\">\\r\\n                      <table id=\\\"autofill\\\" class=\\\"table table-striped table-bordered table-sm dataTable no-footer\\\" role=\\\"grid\\\" aria-describedby=\\\"autofill_info\\\">\\r\\n                        <thead>\\r\\n                          <tr>\\r\\n                            <th>Level</th>\\r\\n                            <th>Answer</th>\\r\\n                            <th><span class=\\\"option-width\\\">Option D </span></th>\\r\\n                            <th><span class=\\\"option-width\\\">Option C </span></th>\\r\\n                            <th><span class=\\\"option-width\\\">Option B </span></th>\\r\\n                            <th><span class=\\\"option-width\\\">Option A </span></th>\\r\\n                            <th>Question </th>\\r\\n                            <th>Question Type </th>\\r\\n                            <th>Duration</th>\\r\\n                            <th>Heading</th>\\r\\n                            <th>Category</th>                           \\r\\n                            <th>Edit </th>\\r\\n                            <th>Delete </th>\\r\\n                            <th><button class=\\\"btn allam-btn btn-warning\\\" (click)=\\\"deletItem()\\\" title=\\\"Delete\\\" type=\\\"button\\\"><i class=\\\"icofont icofont-ui-delete\\\"></i></button> <!-- <button (click)=\\\"deleteFoodSelected()\\\">DeleteSelectedFood</button> --></th>\\r\\n                           <!--  <th>Image URL</th> -->\\r\\n                            \\r\\n                          </tr>\\r\\n                        </thead>\\r\\n                        <tbody>\\r\\n                          <tr *ngFor=\\\"let item of questionArr\\\">\\r\\n                            <td>{{ item.level }}</td>\\r\\n                            <td>{{ item.answer }}</td>\\r\\n                            <td>{{ item.option4 }}</td>\\r\\n                            <td>{{ item.option3 }} </td>\\r\\n                            <td>{{ item.option2 }} </td>\\r\\n                            <td>{{ item.option1 }} </td>\\r\\n                            <td>\\r\\n                              <div *ngIf=\\\"item.qui_type=='text'\\\" [innerHTML]=\\\"item.question | safeHtml\\\"></div>\\r\\n                              <div *ngIf=\\\"item.qui_type=='image'\\\">\\r\\n                                <img src=\\\"{{s3_url+item.question_image_url}}\\\">\\r\\n                              </div>\\r\\n                              <div *ngIf=\\\"item.qui_type=='text_and_image'\\\">\\r\\n                                <img src=\\\"{{s3_url+item.question_image_url}}\\\">\\r\\n                                <br>{{item.question}}\\r\\n                              </div>\\r\\n                              <div *ngIf=\\\"item.qui_type=='video'\\\">\\r\\n                                <video style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                                    <source src=\\\"{{s3_url+item.question_image_url}}\\\" type=\\\"video/mp4\\\" />\\r\\n                                    Browser not supported\\r\\n                                </video>\\r\\n                              </div>\\r\\n                              <div *ngIf=\\\"item.qui_type=='text_and_video'\\\">\\r\\n                                <video style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                                    <source src=\\\"{{s3_url+item.question_image_url}}\\\" type=\\\"video/mp4\\\" />\\r\\n                                    Browser not supported\\r\\n                                </video>\\r\\n                                <br>{{item.question}}\\r\\n                              </div>\\r\\n                            </td>\\r\\n                            <td>{{ item.file_type }}</td>\\r\\n                            <td>{{ item.duration }}</td>\\r\\n                            <td>{{ item.category_name }}</td>\\r\\n                            <td>{{ item.header_name }}</td>\\r\\n                            <td><button type=\\\"button\\\" class=\\\"btn allam-btn btn-success\\\" (click)=\\\"editItem(item)\\\"><i class=\\\"icofont icofont-ui-edit\\\"></i> </button></td>\\r\\n                            <td class=\\\"\\\">\\r\\n                              <button class=\\\"btn allam-btn btn-warning\\\" (click)=\\\"deleteOneItem(item.id,'single')\\\" title=\\\"delete\\\" type=\\\"button\\\"><i class=\\\"icofont icofont-ui-delete\\\"></i></button>\\r\\n                            </td>\\r\\n                             <td class=\\\"categories\\\"><input type=\\\"checkbox\\\"  name=\\\"del_row\\\" [value]=\\\"item.id\\\" (change)=\\\"onCheckboxChange($event,item.id)\\\" >\\r\\n                             <!--  <input #{{item.id}} [(ngModel)]=\\\"item.selected\\\" type=\\\"checkbox\\\"> -->\\r\\n                            </td>\\r\\n\\r\\n\\r\\n                           <!--  <td> <span class=\\\"img-url-break\\\"> {{ item.question_image_url }}</span></td> -->\\r\\n\\r\\n                            \\r\\n                          </tr>\\r\\n                        </tbody>\\r\\n                      </table>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-12 col-xs-12 col-md-12\\\">\\r\\n                        <div class=\\\"m-t-15\\\">\\r\\n                            <button (click)=\\\"reUpload()\\\" class=\\\"btn btn-warning text-white round-border \\\" style=\\\"margin-right: 5px;\\\">\\r\\n                              Cancel\\r\\n                            </button> \\r\\n                            <!-- <button (click)=\\\"onSubmitData()\\\" class=\\\"btn allam-btn-green text-white round-border \\\">\\r\\n                              Publish\\r\\n                            </button> -->\\r\\n                            <button [disabled]=\\\"loading2\\\" class=\\\"btn allam-btn-green text-white round-border\\\"  (click)=\\\"publishSingle()\\\">\\r\\n                            <span *ngIf=\\\"loading2\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                               Publish\\r\\n                            </button>\\r\\n                        </div>\\r\\n                        \\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\" *ngIf=\\\"isEdit\\\">\\r\\n            <div class=\\\"col-md-12\\\">\\r\\n              <form class=\\\"md-float-material\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onUpdateSingleTemp()\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"card-block col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n\\r\\n                        <label>Heading</label>\\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"heading\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.heading.errors }\\\" (change)=\\\"changedHeading($event.target.value)\\\">\\r\\n                          <option value=\\\"\\\">Heading</option>\\r\\n                          <option *ngFor=\\\"let option of headingArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && f.heading.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.heading.errors.required\\\">heading is required.</div>\\r\\n                            <div *ngIf=\\\"f.heading.errors.pattern\\\">Accept numeric values only.</div>\\r\\n                        </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                  <div class=\\\"card-block col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                      <div class=\\\"group\\\">\\r\\n                        <label>Category</label>\\r\\n                        \\r\\n                        <select class=\\\"form-control\\\" formControlName=\\\"category\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.category.errors }\\\">\\r\\n                          <option value=\\\"\\\">Category</option>\\r\\n                          <option *ngFor=\\\"let option of categoryArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                        </select>\\r\\n                        <span class=\\\"md-line\\\"></span>\\r\\n                         <div *ngIf=\\\"submitted && f.category.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.category.errors.required\\\">Category is required.</div>\\r\\n                          </div>\\r\\n                     </div>\\r\\n                  </div> \\r\\n                  <div class=\\\"col-sm-4 col-sm-4 col-md-4\\\">\\r\\n                     <div class=\\\"group\\\">\\r\\n                      <label>Question Type</label>\\r\\n                      <select class=\\\"form-control\\\" (change)=\\\"qtChanged($event.target.value)\\\" formControlName=\\\"question_type\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.question_type.errors }\\\">\\r\\n                          <option value=\\\"text\\\">Text</option>\\r\\n                          <option value=\\\"image\\\">Image</option>\\r\\n                          <option value=\\\"text_and_image\\\">Text and Image</option>\\r\\n                          <option value=\\\"video\\\">Video</option>\\r\\n                          <option value=\\\"text_and_video\\\">Text and Video</option>\\r\\n                      </select>\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.question_type.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                          <div *ngIf=\\\"f.question_type.errors.required\\\">Question Type is required.</div>\\r\\n\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n           \\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-lg-8 \\\">\\r\\n                    <div class=\\\"row \\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n                      \\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option A\\\" type=\\\"text\\\" formControlName=\\\"option1\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option1.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                        <div *ngIf=\\\"submitted && f.option1.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option1.errors.required\\\">Option A is required.</div>\\r\\n                         </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2  txt-left \\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"a\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'a'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n\\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option B\\\" type=\\\"text\\\" formControlName=\\\"option2\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option2.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option2.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option2.errors.required\\\">Option B is required.</div>\\r\\n                         </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2 txt-left\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"b\\\" formControlName=\\\"answer\\\"  [checked]=\\\"form.get('answer').value == 'b'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n\\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option C\\\" type=\\\"text\\\" formControlName=\\\"option3\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option3.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option3.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option3.errors.required\\\">Option C is required.</div>\\r\\n                        </div>\\r\\n\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\" name=\\\"answer\\\" value=\\\"c\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'c'\\\"> \\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row m-t-15\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 group\\\">\\r\\n                      \\r\\n                      <input class=\\\"form-control\\\" placeholder=\\\"Option D\\\" type=\\\"text\\\" formControlName=\\\"option4\\\" maxlength=\\\"70\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.option4.errors }\\\">\\r\\n                      <span class=\\\"md-line\\\"></span>\\r\\n                       <div *ngIf=\\\"submitted && f.option4.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.option4.errors.required\\\">Option D is required.</div>\\r\\n                        </div>\\r\\n\\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> \\r\\n                        <label class=\\\"radio-box\\\">\\r\\n                          <input type=\\\"radio\\\"  name=\\\"answer\\\" value=\\\"d\\\" formControlName=\\\"answer\\\" [checked]=\\\"form.get('answer').value == 'd'\\\">\\r\\n                          <span class=\\\"checkmark\\\"></span>\\r\\n                        </label>\\r\\n                       </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10\\\">\\r\\n                         <div class=\\\"group\\\">\\r\\n                          <label>Level</label>\\r\\n                          <select class=\\\"form-control\\\" formControlName=\\\"level\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.level.errors }\\\">\\r\\n                            <option value=\\\"\\\">Level</option>\\r\\n                            <option *ngFor=\\\"let option of levelOptions\\\" [value]=\\\"option\\\" >{{option}}</option>\\r\\n                          </select>\\r\\n                          \\r\\n                          <span class=\\\"md-line\\\"></span>\\r\\n                           <div *ngIf=\\\"submitted && f.level.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.level.errors.required\\\">Level is required.</div>\\r\\n                              <div *ngIf=\\\"f.level.errors.pattern\\\">Accept numeric values only.</div>\\r\\n\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10\\\">\\r\\n                         <div class=\\\"group\\\">\\r\\n                          <label>Duration (In Seconds)</label>\\r\\n                          <select class=\\\"form-control\\\" formControlName=\\\"duration\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.duration.errors }\\\">\\r\\n                            <option value=\\\"\\\">Duration (In Seconds)</option>\\r\\n                            <option *ngFor=\\\"let option of durationOptions\\\" [value]=\\\"option\\\" >{{option}}</option>\\r\\n                          </select>\\r\\n                          \\r\\n                          <span class=\\\"md-line\\\"></span>\\r\\n                           <div *ngIf=\\\"submitted && f.duration.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                              <div *ngIf=\\\"f.duration.errors.required\\\">Question time is required.</div>\\r\\n                              <div *ngIf=\\\"f.duration.errors.pattern\\\">Accept numeric values only.</div>\\r\\n\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 \\\">\\r\\n                        <div class=\\\"group\\\">\\r\\n                          <label>Note</label>\\r\\n                         <input class=\\\"form-control\\\" placeholder=\\\"Note\\\" type=\\\"text\\\" formControlName=\\\"note\\\" maxlength=\\\"70\\\">\\r\\n                         <span class=\\\"md-line\\\"></span>\\r\\n                        </div>\\r\\n                      </div> \\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>\\r\\n                    </div> \\r\\n                    <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-sm-10 col-xs-10 col-md-10 \\\">\\r\\n                        <div class=\\\"m-t-15\\\">\\r\\n                          <button (click)=\\\"goBack()\\\" [disabled]=\\\"loading\\\" class=\\\"btn btn-warning text-white round-border m-r-10 create_cancel\\\">\\r\\n                             <span *ngIf=\\\"this.idEdit\\\">Back</span>\\r\\n                          </button>\\r\\n                          \\r\\n                          <button [disabled]=\\\"loading\\\" class=\\\"btn allam-btn-green text-white round-border create_cancel\\\">\\r\\n                            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                             <span *ngIf=\\\"this.idEdit\\\">Update</span>\\r\\n                             \\r\\n                          </button>\\r\\n\\r\\n                        </div>\\r\\n                        \\r\\n                      </div>\\r\\n                      <div class=\\\"col-sm-2 col-xs-2 col-md-2\\\"> </div>  \\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"col-lg-4 \\\" *ngIf=\\\"question_type=='text'\\\">\\r\\n                    <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                     <label>Question</label>\\r\\n                      <ckeditor [editor]=\\\"Editor\\\" [data]='question_value' [config]=\\\"config\\\" (blur)=\\\"onChange($event)\\\"></ckeditor>\\r\\n                      <div class=\\\"question_note\\\">Note: your question should be in the limit of the text editor height and width. NO SCROLL BAR should be displayed as this will be out of the limit of the question maximum length.</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='image'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                    <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"fileChangeEvent($event)\\\" accept=\\\"image/x-png,image/jpeg\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"preview\\\" >\\r\\n                        <img [src]=\\\"croppedImage\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='text_and_image'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"fileChangeEvent($event)\\\" accept=\\\"image/x-png,image/jpeg\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"preview\\\" >\\r\\n                        <img [src]=\\\"croppedImage\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                       <label>Question Text</label>\\r\\n                        <textarea class=\\\"form-control\\\" placeholder=\\\"Question\\\" formControlName=\\\"question_text\\\" maxlength=\\\"70\\\" > </textarea>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='video'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" (change)=\\\"uploadVideo($event)\\\" class=\\\"form-control\\\" accept=\\\"video/mp4,video/x-m4v,video/*\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"video_preview\\\" *ngIf=\\\"croppedImage!=''\\\">\\r\\n                         <video  style=\\\"width: 285px;height: 170px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                            <source src=\\\"{{croppedImage}}\\\" type=\\\"video/mp4\\\" />Browser not supported\\r\\n                         </video>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div *ngIf=\\\"question_type=='text_and_video'\\\" class=\\\"remove-txt-here col-md-4\\\">\\r\\n                   <div class=\\\"form-group  files color m-t-15\\\">\\r\\n                      <div class=\\\" m-t-15\\\">\\r\\n                        <label>Upload Question </label>\\r\\n                          <input type=\\\"file\\\" (change)=\\\"uploadVideo($event)\\\" class=\\\"form-control\\\" accept=\\\"video/mp4,video/x-m4v,video/*\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"video_preview\\\" *ngIf=\\\"croppedImage!=''\\\">\\r\\n                       <video style=\\\"width: 285px;height: 170px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n                          <source src=\\\"{{croppedImage}}\\\" type=\\\"video/mp4\\\" />Browser not supported\\r\\n                         </video>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                      <div class=\\\"editor-wrap\\\" id=\\\"my-node\\\"> \\r\\n                       <label>Question Text</label>\\r\\n                        <textarea class=\\\"form-control\\\" placeholder=\\\"Question\\\" formControlName=\\\"question_text\\\" maxlength=\\\"70\\\" > </textarea>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n              </form>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n     </div>\\r\\n  </div>\\r\\n</div>\\r\\n<div class=\\\"modal crop-image-wrap\\\" id=\\\"myModal\\\" [style.display]=\\\"showModal ? 'block' : 'none'\\\">\\r\\n  <div class=\\\"modal-dialog\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n\\r\\n      <!-- Modal Header -->\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\">Crop Image</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close alert-danger\\\" data-dismiss=\\\"modal\\\" (click)=\\\"closePopup()\\\">&times;</button>\\r\\n      </div>\\r\\n      <!-- Modal body -->\\r\\n      <div class=\\\"modal-body slot-details-wrap\\\">\\r\\n          <image-cropper \\r\\n          [imageChangedEvent]=\\\"imageChangedEvent\\\" \\r\\n          [maintainAspectRatio]=\\\"true\\\" \\r\\n          [aspectRatio]=\\\"3 / 2\\\"\\r\\n          [resizeToWidth]=\\\"600\\\" \\r\\n          format=\\\"png\\\" \\r\\n          (imageCropped)=\\\"imageCropped($event)\\\" \\r\\n          (imageLoaded)=\\\"imageLoaded()\\\"\\r\\n          (cropperReady)=\\\"cropperReady()\\\" \\r\\n          (loadImageFailed)=\\\"loadImageFailed()\\\"></image-cropper>\\r\\n      </div>\\r\\n\\r\\n      <!-- Modal footer -->\\r\\n      <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-warning\\\" data-dismiss=\\\"modal\\\" (click)=\\\"closePopup()\\\">Done</button>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","export default \"<div class=\\\"row\\\">\\r\\n<div class=\\\"col-sm-12\\\">\\r\\n\\r\\n<div class=\\\"card\\\">\\r\\n\\r\\n<div class=\\\"card-block\\\">\\r\\n <div class=\\\"dt-responsive table-responsive11\\\">\\r\\n<div id=\\\"autofill_wrapper\\\" class=\\\"dataTables_wrapper dt-bootstrap4\\\">\\r\\n\\r\\n        <div class=\\\"row subc-gc\\\">\\r\\n          <div class=\\\"card-block col-sm-4 col-md-4\\\">\\r\\n              <div class=\\\"group\\\">\\r\\n                <label>Heading</label>\\r\\n                <select class=\\\"form-control\\\" (change)=\\\"changedHeading($event.target.value)\\\" [(ngModel)]=\\\"term1\\\">\\r\\n                  <option value=\\\"\\\">Heading</option>\\r\\n                  <option *ngFor=\\\"let option of headingArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                </select>\\r\\n             </div>\\r\\n          </div> \\r\\n          <div class=\\\"card-block col-sm-4 col-md-4\\\">\\r\\n              <div class=\\\"group\\\">\\r\\n                <label>Category</label>\\r\\n              \\r\\n                <select  (change)=\\\"changedCategory()\\\" class=\\\"form-control\\\"  [(ngModel)]=\\\"term2\\\">\\r\\n                  <option value=\\\"0\\\">Category</option>\\r\\n                  <option *ngFor=\\\"let option of categoryArr\\\" [value]=\\\"option.id\\\" >{{option.title}}</option>\\r\\n                </select>\\r\\n             </div>\\r\\n          </div> \\r\\n\\r\\n        <!--   <div class=\\\"card-block col-xs-3 col-sm-3 col-md-3\\\">\\r\\n            <div class=\\\"group\\\">\\r\\n                <label>Question: \\r\\n                  <input type=\\\"search\\\" class=\\\"form-control\\\" placeholder=\\\"Question\\\" aria-controls=\\\"autofill\\\" [(ngModel)]=\\\"term\\\"> \\r\\n                </label>\\r\\n            </div>\\r\\n          </div> -->\\r\\n\\r\\n      <div class=\\\"card-block col-sm-4 col-md-4\\\" *ngIf=\\\"role_id==2\\\"> \\r\\n              \\r\\n              <a [routerLink]=\\\"['add']\\\" class=\\\"btn allam-btn-green text-white m-t-15\\\">\\r\\n                  <i _ngcontent-yet-c5=\\\"\\\" class=\\\"icofont icofont-plus\\\"></i>Add Question\\r\\n              </a>\\r\\n      </div>\\r\\n\\r\\n      </div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\r\\n<div class=\\\"col-xs-12 col-sm-12\\\">\\r\\n  <div class=\\\"dt-responsive table-responsive\\\">\\r\\n<table id=\\\"autofill\\\" class=\\\"table table-striped table-bordered nowrap dataTable\\\" role=\\\"grid\\\" aria-describedby=\\\"autofill_info\\\">\\r\\n<thead>\\r\\n<tr role=\\\"row\\\">\\r\\n    <th>Level</th>\\r\\n    <th>Answer</th>\\r\\n    <th><span class=\\\"option-width\\\">Option D </span></th>\\r\\n    <th><span class=\\\"option-width\\\">Option C </span></th>\\r\\n    <th><span class=\\\"option-width\\\">Option B </span></th>\\r\\n    <th><span class=\\\"option-width\\\">Option A </span></th>\\r\\n    <th>Question Type </th>\\r\\n    <th>Question </th>\\r\\n    <th>Duration</th>\\r\\n    <th>Category</th>\\r\\n    <th>Heading</th>\\r\\n    <th  *ngIf=\\\"role_id==1\\\">Action</th>\\r\\n    <th  *ngIf=\\\"role_id==2\\\">Status</th>\\r\\n</thead>\\r\\n<tbody>\\r\\n\\r\\n\\r\\n\\r\\n<tr role=\\\"row\\\" *ngFor=\\\"let data of questionArr | cFilter:{header_id: term1, category_id:term2} : false | paginate : {\\r\\n                  itemsPerPage: pageSize,\\r\\n                  currentPage: page,\\r\\n                  totalItems: count\\r\\n                }; \\\">\\r\\n\\r\\n    <td>{{ data.level }}</td>\\r\\n    <td>{{ data.answer }}</td>\\r\\n    <td>{{ data.option4 }}</td>\\r\\n    <td>{{ data.option3 }} </td>\\r\\n    <td>{{ data.option2 }} </td>\\r\\n    <td>{{ data.option1 }} </td>\\r\\n    <td>{{ data.file_type }}</td>\\r\\n   <!--  <td>{{ data.question }}</td>\\r\\n    <td><a target=\\\"_blank\\\" href=\\\"{{s3_url+data.question_image_url}}\\\">{{ s3_url+data.question_image_url }}</a></td> -->\\r\\n    <td>\\r\\n      <div *ngIf=\\\"data.file_type=='text'\\\">\\r\\n        {{data.question}}\\r\\n      </div>\\r\\n        <div *ngIf=\\\"data.file_type=='image'\\\">\\r\\n          <img src=\\\"{{s3_url+data.question_image_url}}\\\">\\r\\n        </div>\\r\\n        <div *ngIf=\\\"data.file_type=='text_and_image'\\\">\\r\\n          <img src=\\\"{{s3_url+data.question_image_url}}\\\">\\r\\n          <br>{{data.question}}\\r\\n        </div>\\r\\n        <div *ngIf=\\\"data.file_type=='video'\\\">\\r\\n          <video style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n              <source src=\\\"{{s3_url+data.question_image_url}}\\\" type=\\\"video/mp4\\\" />\\r\\n              Browser not supported\\r\\n          </video>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"data.file_type=='text_and_video'\\\">\\r\\n          <video style=\\\"width: 285px;height: 200px;\\\" controls (click)=\\\"toggleVideo()\\\" id=\\\"videoPlayer\\\">\\r\\n              <source src=\\\"{{s3_url+data.question_image_url}}\\\" type=\\\"video/mp4\\\" />\\r\\n              Browser not supported\\r\\n          </video>\\r\\n          <br>{{data.question}}\\r\\n        </div>\\r\\n    </td>\\r\\n    <td>{{ data.duration }}</td>\\r\\n    <td>{{ data.category_name }}</td>\\r\\n    <td>{{ data.header_name }}</td>\\r\\n  <td *ngIf=\\\"role_id==1\\\">\\r\\n\\r\\n  <button *ngIf=\\\"data.status!='1'\\\" class=\\\"btn allam-status-btn\\\" (click)=\\\"changeStatus(data)\\\"> <i class=\\\"fa fa-times text-warning\\\"></i> Inactive </button>\\r\\n  <button *ngIf=\\\"data.status=='1'\\\" class=\\\"btn allam-status-btn\\\" (click)=\\\"changeStatus(data)\\\"> <i class=\\\"fa fa-check allam-txt-green\\\"></i> Active </button>\\r\\n\\r\\n  </td>\\r\\n  <td *ngIf=\\\"role_id!=1\\\">\\r\\n  <p *ngIf=\\\"data.status!='1'\\\" class=\\\"btn allam-status-btn\\\"> Pending </p>\\r\\n  <p *ngIf=\\\"data.status=='1'\\\" class=\\\"btn allam-status-btn\\\">Approved </p>\\r\\n  </td>\\r\\n\\r\\n</tr>\\r\\n<tr *ngIf=\\\"questionArr.length==0\\\">\\r\\n  <td colspan=\\\"13\\\" align=\\\"center\\\">No Data found.</td>\\r\\n</tr>\\r\\n\\r\\n</tbody>\\r\\n\\r\\n</table>\\r\\n\\r\\n</div>\\r\\n\\r\\n</div></div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n<div class=\\\"col-xs-12 col-sm-12 col-md-6 m-t-20\\\">\\r\\n<div class=\\\"dataTables_info\\\" role=\\\"status\\\" aria-live=\\\"polite\\\">Show Entries\\r\\n<label>\\r\\n  <select (change)=\\\"handlePageSizeChange($event)\\\" class=\\\"form-control inpuitemsPerPaget-sm\\\">\\r\\n    <option *ngFor=\\\"let size of pageSizes\\\" [ngValue]=\\\"size\\\">\\r\\n        {{ size }}\\r\\n    </option>\\r\\n  </select>\\r\\n</label>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n<div  class=\\\"col-xs-12 col-sm-12 col-md-6\\\">\\r\\n   <pagination-controls\\r\\n      previousLabel=\\\"Prev\\\"\\r\\n      nextLabel=\\\"Next\\\"\\r\\n      responsive=\\\"true\\\"\\r\\n      class=\\\"pagination\\\"\\r\\n      (pageChange)=\\\"handlePageChange($event)\\\"\\r\\n    ></pagination-controls>  \\r\\n</div>\\r\\n</div>\\r\\n</div>\\r\\n</div>\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n</div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<style>\\r\\n.pagination { float: right;}\\r\\ndiv.dataTables_wrapper div.dataTables_info {float: left;}\\r\\n.subc-gc { }\\r\\n\\r\\n\\r\\n</style>\"","export default \".table-responsive {\\n  display: block;\\n  width: 912px;\\n  overflow-x: auto;\\n}\\n\\n.single-curriculum-wrap .group label {\\n  display: block;\\n}\\n\\n.card-block {\\n  padding: 0 12px 5px;\\n}\\n\\n:host ::ng-deep .ck-editor__editable_inline {\\n  min-height: 200px;\\n  max-height: 200px;\\n}\\n\\n:host ::ng-deep .ck-editor__editable_inline p {\\n  font-size: 18px;\\n}\\n\\n:host ::ng-deep .ck-editor {\\n  width: 300px;\\n}\\n\\n.nav-tabs {\\n  border-bottom: 1px solid #dee2e6;\\n  width: 100%;\\n  margin-bottom: 15px;\\n  padding-left: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvZ2VuZXJhbC1jb21wZXRpdGlvbi9hZGQvRDpcXG1lYW5cXGFsbGFtLWNtcy9zcmNcXGFwcFxccGFnZXNcXGdlbmVyYWwtY29tcGV0aXRpb25cXGFkZFxcYWRkLWdjLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy9nZW5lcmFsLWNvbXBldGl0aW9uL2FkZC9hZGQtZ2MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0FDQ0o7O0FER0E7RUFDSSxjQUFBO0FDQUo7O0FER0E7RUFDSSxtQkFBQTtBQ0FKOztBREdBO0VBQ0ksaUJBQUE7RUFDQSxpQkFBQTtBQ0FKOztBREdBO0VBQ0ksZUFBQTtBQ0FKOztBREdBO0VBQ0ksWUFBQTtBQ0FKOztBREdBO0VBQ0ksZ0NBQUE7RUFDQSxXQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQ0FKIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvZ2VuZXJhbC1jb21wZXRpdGlvbi9hZGQvYWRkLWdjLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRhYmxlLXJlc3BvbnNpdmUge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogOTEycHg7XHJcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xyXG59XHJcblxyXG5cclxuLnNpbmdsZS1jdXJyaWN1bHVtLXdyYXAgLmdyb3VwIGxhYmVsIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4uY2FyZC1ibG9jayB7XHJcbiAgICBwYWRkaW5nOiAwIDEycHggNXB4O1xyXG59XHJcblxyXG46aG9zdCA6Om5nLWRlZXAgLmNrLWVkaXRvcl9fZWRpdGFibGVfaW5saW5lIHtcclxuICAgIG1pbi1oZWlnaHQ6IDIwMHB4O1xyXG4gICAgbWF4LWhlaWdodDogMjAwcHg7XHJcbn1cclxuXHJcbjpob3N0IDo6bmctZGVlcCAuY2stZWRpdG9yX19lZGl0YWJsZV9pbmxpbmUgcCB7XHJcbiAgICBmb250LXNpemU6MThweDtcclxufVxyXG5cclxuOmhvc3QgOjpuZy1kZWVwIC5jay1lZGl0b3J7XHJcbiAgICB3aWR0aDogMzAwcHg7O1xyXG59XHJcblxyXG4ubmF2LXRhYnMge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZWUyZTY7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDE1cHg7XHJcbn1cclxuXHJcblxyXG4iLCIudGFibGUtcmVzcG9uc2l2ZSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogOTEycHg7XG4gIG92ZXJmbG93LXg6IGF1dG87XG59XG5cbi5zaW5nbGUtY3VycmljdWx1bS13cmFwIC5ncm91cCBsYWJlbCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4uY2FyZC1ibG9jayB7XG4gIHBhZGRpbmc6IDAgMTJweCA1cHg7XG59XG5cbjpob3N0IDo6bmctZGVlcCAuY2stZWRpdG9yX19lZGl0YWJsZV9pbmxpbmUge1xuICBtaW4taGVpZ2h0OiAyMDBweDtcbiAgbWF4LWhlaWdodDogMjAwcHg7XG59XG5cbjpob3N0IDo6bmctZGVlcCAuY2stZWRpdG9yX19lZGl0YWJsZV9pbmxpbmUgcCB7XG4gIGZvbnQtc2l6ZTogMThweDtcbn1cblxuOmhvc3QgOjpuZy1kZWVwIC5jay1lZGl0b3Ige1xuICB3aWR0aDogMzAwcHg7XG59XG5cbi5uYXYtdGFicyB7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGVlMmU2O1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { ChangeEvent,BlurEvent } from '@ckeditor/ckeditor5-angular/ckeditor.component';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { GcService } from '../../../services/gc.service';\r\nimport { ToasterModule, ToasterService} from 'angular2-toaster';\r\nimport { HttpEvent, HttpEventType } from '@angular/common/http';\r\nimport { HttpClient, HttpParams, HttpHeaders, HttpErrorResponse} from '@angular/common/http';\r\nimport { environment } from '../../../../environments/environment';\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\nimport { AuthenticationService } from '../../../services';\r\nimport { ImageCroppedEvent } from 'ngx-image-cropper'; \r\n\r\ndeclare var $: any;\r\n\r\nconst apiUrl =environment.apiUrl;\r\n\r\n@Component({\r\n  selector: 'app-add-gc',\r\n  templateUrl: './add-gc.component.html',\r\n  styleUrls: ['./add-gc.component.scss']\r\n})\r\nexport class AddGcComponent implements OnInit {\r\n\ttitle = 'GC Bulk';\r\n  s3_url =environment.s3_url;\r\n  local_api_url=environment.apiUrl;\r\n  public Editor = ClassicEditor;\r\n  form: FormGroup;\r\n  formVar: FormGroup;\r\n\tloading = false;\r\n\tsubmitted = false;\r\n\terror = '';\r\n  private questionArr:any=[];\r\n  private headingArr:any=[];\r\n\tprivate categoryArr:any=[];\r\n\r\n  uploadedFiles: Array<File>;\r\n  isProcessed: boolean = false;\r\n  isError: boolean;\r\n  errorData: [];\r\n  fileData: any;\r\n  errorCode : number;\r\n  errorDesc : string;\r\n  percentDone: any = 0;\r\n  masterArr:any=[];\r\n  logUser:any;\r\n  created_by:number;\r\n  isEdit=false;\r\n  idEdit=false;\r\n  editData:any=[];\r\n  isSave = true;\r\n  preview: string;\r\n  loading2 = false;\r\n  submitted2 = false;\r\n  checkBox : string = 'false';\r\n\r\n  isSingle=true;\r\n  isBulk=false;\r\n  question_type:any='text'; \r\n  showModal:boolean=false;\r\n  isFile:boolean=false;\r\n  isVideo:boolean=false;\r\n  public default_font_size='font-size:18px';\r\n\r\n\r\n  public selectedItems = [];\r\n\r\n\tprivate toasterService: ToasterService;\r\n\r\n\r\n  public config={\r\n  fontSize: {\r\n      options: [\r\n          12,\r\n          13,\r\n          14,\r\n          15,\r\n          16,\r\n          17,\r\n          18\r\n      ]\r\n    },\r\n    toolbar: [\r\n      'heading',\r\n      '|',\r\n      'fontSize',\r\n      '|',\r\n      'bold',\r\n      'italic',\r\n      'link',\r\n      'bulletedList',\r\n      'numberedList',\r\n      '|',\r\n      'indent',\r\n      'outdent',\r\n      '|',\r\n      'imageUpload',\r\n      'blockQuote',\r\n      'insertTable',\r\n      'mediaEmbed',\r\n      'MathType',\r\n      'ChemType',\r\n      'undo',\r\n      'redo'\r\n    ]\r\n  }\r\n\r\n  public question_value: string = ``;\r\n\r\n  private levelOptions: string[] = [\"1\", \"2\", \"3\", \"4\", \"5\"];\r\n  private durationOptions: string[] = [\"05\",\"15\", \"25\", \"30\",\"60\",\"120\"];\r\n\r\n\tconstructor(private fb: FormBuilder,private route: ActivatedRoute,private router: Router, private http: HttpClient, private gcService: GcService,private alertService: ToasterService,private authenticationService: AuthenticationService) \r\n\t{\r\n\t  \tthis.formVar = this.fb.group({\r\n        heading: ['',Validators.required],\r\n        category: ['',Validators.required],\r\n\t      excelFile: [null],\r\n\t      zipFile : [null],\r\n        existImage : ['']\r\n\t    })\r\n\t}\r\n\r\n\tngOnInit() {\r\n\r\n    this.form = this.fb.group({\r\n          question: [''],\r\n          question_text: [''],\r\n          question_image_url:[''],\r\n          question_image:[''],\r\n          qui_type:[''],\r\n          question_type:[this.question_type,Validators.required],\r\n          video: [null],\r\n          option1: ['',Validators.required],\r\n          option2: ['',Validators.required],\r\n          option3: ['',Validators.required],\r\n          option4: ['',Validators.required],\r\n          answer: [''],\r\n          heading: ['',Validators.required],\r\n          category: ['',Validators.required],\r\n          note: [''],\r\n          level: ['',[Validators.required, Validators.pattern(\"^[0-9]*$\")]],\r\n          duration: ['',[Validators.required, Validators.pattern(\"^[0-9]*$\")]],\r\n          delArray: this.fb.array([])\r\n        });\r\n\r\n    this.logUser    = this.authenticationService.currentUserValue;\r\n    this.logUser    = JSON.parse(this.logUser);\r\n    this.created_by = this.logUser['user'][0]['id'];  \r\n    this.getDraftQuestion('single');\r\n    this.getMasterData();\r\n    this.getHeading();\r\n    \r\n\t}\r\n  get f() { return this.form.controls; }\r\n  get fv() { return this.formVar.controls; }\r\n\r\n\r\n  public getMasterData() {\r\n      \r\n        this.masterArr=[];\r\n       \r\n  }\r\n  public getDraftQuestion(type='bulk') {\r\n    this.gcService.getDraftQuestionByUser(this.created_by,type)\r\n    .subscribe(\r\n    response => { \r\n      this.questionArr = response;\r\n      if (Object.keys(this.questionArr).length != 0) {\r\n        this.isProcessed = true;\r\n      }\r\n    },\r\n    error => {\r\n        this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n        this.loading = false;\r\n    });\r\n  }\r\n\r\n  getHeading() {\r\n    this.gcService.getHeading()\r\n    .subscribe(\r\n    response => { \r\n      this.headingArr = response;\r\n      \r\n    },\r\n    error => {\r\n       //\r\n    });\r\n  }\r\n\r\n  getCategoryByHeading(heading_id) {\r\n    this.gcService.getCategoryByHeading(heading_id)\r\n    .subscribe(\r\n    response => { \r\n      this.categoryArr = response;\r\n    },\r\n    error => {\r\n       //\r\n    });\r\n  }\r\n\r\n  editItem(event)\r\n    {\r\n      this.isFile   = false;\r\n      this.isVideo   = false;\r\n\r\n      this.editData = event;\r\n      this.isEdit   = true;\r\n      this.isSave   = false;\r\n      this.idEdit   = this.editData.id;\r\n      this.question_value=this.editData.question;\r\n      \r\n      console.log('---------------->>');\r\n      console.log(this.question_value);\r\n      \r\n      //const domEditableElement = document.querySelector('.ck-editor__editable');\r\n      //const editorInstance = domEditableElement.ckeditorInstance;\r\n      //editorInstance.setData(this.editData.question );\r\n\r\n      //console.log('<<----------------');\r\n      //console.log(JSON.stringify(this.editData));\r\n\r\n      this.getCategoryByHeading(this.editData.header_id);\r\n\r\n      this.form.patchValue({\r\n          question: this.editData.question,\r\n          option1: this.editData.option1,\r\n          option2: this.editData.option2,\r\n          option3: this.editData.option3,\r\n          option4: this.editData.option4,\r\n          answer: this.editData.answer,\r\n          heading: this.editData.header_id,\r\n          category: this.editData.category_id,\r\n          note: this.editData.note,\r\n          level:this.editData.level,\r\n          duration:this.editData.duration,\r\n          question_text:this.editData.question,\r\n          question_type:this.editData.qui_type,\r\n          qui_type:this.editData.qui_type,\r\n          question_image_url:this.editData.question_image_url,\r\n          question_image:this.editData.question_image,\r\n\r\n          });\r\n          if(this.editData.type=='bulk')\r\n          {\r\n            if(this.editData.question_image=='live'){\r\n              this.croppedImage=this.s3_url+this.editData.question_image_url;\r\n            }\r\n            else{\r\n              this.croppedImage=this.local_api_url+this.editData.question_image;\r\n            }\r\n            \r\n          }\r\n          else{\r\n            this.croppedImage=this.s3_url+this.editData.question_image_url;\r\n          }\r\n          \r\n          this.question_type=this.editData.qui_type;\r\n\r\n          /*let image = this.editData.question_image_url;\r\n          let reader = new FileReader();\r\n          reader.addEventListener(\"load\",\r\n            () => {\r\n                this.preview = reader.result as string;\r\n            },\r\n            false);\r\n\r\n          if (image) { console.log(image.type)\r\n            if (image.type !== \"application/pdf\")\r\n              reader.readAsDataURL(image);\r\n          }\r\n\r\n          this.preview = apiUrl+this.editData.question_image_url;\r\n          console.log(this.preview)*/\r\n    }\r\n  goBack(){\r\n    this.isEdit   = false;\r\n    this.isSave   = true;\r\n  }\r\n\r\n  fileChangeXlsx(element, variable) {\r\n      //var pattern=\"^.+\\.(xlsx|xls|csv)$\";\r\n      //var pattern=\"^.+\\.(xlsx)$\";\r\n      \r\n      const file = (element.target as HTMLInputElement).files[0]; \r\n      var name = element.target.files[0].name;\r\n      var ext = name.substring(name.lastIndexOf('.') + 1);\r\n\r\n      if (ext.toLowerCase() == 'xlsx') {\r\n          if (typeof (this.uploadedFiles) == \"undefined\") {\r\n            this.uploadedFiles = new Array<File>();\r\n            this.uploadedFiles.push(element.target.files[0]);\r\n          }\r\n          else {\r\n            this.uploadedFiles.push(element.target.files[0]);\r\n          }\r\n      }else{\r\n        variable.value = null;\r\n        Swal.fire('','File type should be xlsx','error');\r\n        return;\r\n      }\r\n    }\r\n  fileChangeZip(element, variable1) {\r\n    const file = (element.target as HTMLInputElement).files[0];\r\n    console.log('type', file.type);\r\n\r\n    var name = element.target.files[0].name;\r\n    var ext = name.substring(name.lastIndexOf('.') + 1);\r\n\r\n    if (ext.toLowerCase() == 'zip') {\r\n        if (typeof (this.uploadedFiles) == \"undefined\") {\r\n          this.uploadedFiles = new Array<File>();\r\n          this.uploadedFiles.push(element.target.files[0]);\r\n        }\r\n        else {\r\n          this.uploadedFiles.push(element.target.files[0]);\r\n        }\r\n    }else{\r\n      variable1.value = null;\r\n      Swal.fire('','File type should be zip','error');\r\n      return;\r\n    }\r\n  }\r\n  // Image Preview\r\n  uploadQuestionImage(event) {\r\n      const file = (event.target as HTMLInputElement).files[0];\r\n      this.form.patchValue({\r\n        question_image_url: file\r\n      });\r\n      this.form.get('question_image_url').updateValueAndValidity()\r\n\r\n      // File Preview\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        this.preview = reader.result as string;\r\n      }\r\n      reader.readAsDataURL(file)\r\n  }\r\n\r\n  eventCheck(event){\r\n    this.checkBox = event.target.checked;\r\n      console.log(event.target.checked)  //<--- Check with this\r\n  }\r\n\r\n  upload() {\r\n  this.submitted=true;\r\n\r\n     if (this.formVar.invalid) {\r\n        return;\r\n    }\r\n        this.showLoader(); \r\n        this.loading2   = true; \r\n        \r\n        if (typeof (this.uploadedFiles) == \"undefined\") {\r\n          this.isError = false;\r\n          this.isProcessed=false;\r\n          this.errorData = null;\r\n          this.loading2   = false; \r\n\r\n          //this.alertService.pop('error', \"Excel file or zip file not selected.\");\r\n          Swal.fire('','Excel file or zip file not selected.','error');\r\n          this.hideLoader(); \r\n          return;\r\n        }\r\n\r\n        let formData = new FormData();\r\n        formData.append(\"existImage\", this.checkBox);\r\n        //console.log('this.checkBox ', this.checkBox)\r\n        for (var i = 0; i < this.uploadedFiles.length; i++) {\r\n          formData.append(\"uploads[]\", this.uploadedFiles[i], this.uploadedFiles[i].name);\r\n        }\r\n        //console.log('formData '+JSON.stringify(formData));\r\n        //const url = 'http://localhost:3000/api/upload';\r\n        this.http.post(apiUrl+'gc/api/upload', formData, { reportProgress: true, observe: \"events\"})\r\n          .subscribe((response: HttpEvent<any>) => {\r\n              \r\n              switch (response.type) {\r\n                    case HttpEventType.Sent:\r\n                        console.log('Request has been made!');\r\n                        break;\r\n                    case HttpEventType.ResponseHeader:\r\n                        console.log('Response header has been received!');\r\n                        break;\r\n                    case HttpEventType.UploadProgress:\r\n                        this.percentDone = Math.round(response.loaded / response.total * 100);\r\n                        console.log(`Uploaded! ${this.percentDone}%`);\r\n                        break;\r\n                    case HttpEventType.Response:\r\n                         //console.log('response.body.message '+ response.body.message);\r\n                            console.log('Upload successfully ', response.body);\r\n                        if (response.body.error_code == 0) {\r\n                             //this.errorData = response[\"data\"];\r\n                             this.uploadedFiles = [];\r\n                              this.fileData = response.body[\"data\"];\r\n                              //this.fileData['created_by'] = this.created_by; \r\n                              //this.fileData.unshift({'created_by' : this.created_by});\r\n                              //this.fileData.push({'created_by' : this.created_by});\r\n                              console.log(this.fileData);\r\n                              this.saveTemp(); // Here call function for save data in temp table\r\n                              this.isError=false;\r\n                              this.isProcessed=true;\r\n                              this.loading2 = false;\r\n                              this.alertService.pop('success', 'Data upload successfully!');\r\n                              this.hideLoader(); \r\n                              this.uploadedFiles = new Array<File>();\r\n                        }\r\n                        else if (response.body.error_code == 1) {\r\n                              this.isError = false;\r\n                              this.isProcessed=false;\r\n                              this.loading2 = false;\r\n                              this.errorData = response.body[\"data\"];\r\n                              this.errorCode = response.body[\"error_code\"];\r\n                              this.errorDesc = response.body[\"err_desc\"];\r\n                              Swal.fire('',response.body.err_desc,'error');\r\n                              //this.alertService.pop('error', response.body.err_desc);\r\n                              this.uploadedFiles = new Array<File>();\r\n                              this.formVar.reset();\r\n                        }else if (response.body.error_code == 2) {\r\n                              this.isError = true;\r\n                              this.isProcessed=false;\r\n                              this.loading2 = false;\r\n                              this.errorData = response.body[\"data\"];\r\n                              Swal.fire('',response.body.err_desc,'error');\r\n                              //this.alertService.pop('error', response.body.err_desc);\r\n                              this.uploadedFiles = new Array<File>();\r\n                              this.formVar.reset();\r\n                        }   \r\n                \r\n                this.percentDone = false;\r\n                       \r\n                }\r\n\r\n            \r\n            this.hideLoader(); \r\n            //console.log('response receved is ', response);\r\n            //console.log('HttpEventType -- '+JSON.stringify(HttpEventType));\r\n        });\r\n  }\r\n\r\n\r\n\r\n  saveTemp()\r\n  {\r\n    var _heading =this.formVar.value.heading;\r\n    var _category =this.formVar.value.category;\r\n    console.log(_heading);\r\n    console.log(_category);\r\n    this.gcService.addBulkQuestionTemp(this.fileData, this.created_by,_heading,_category)\r\n          .subscribe(\r\n              data => { //console.log('data -- '+JSON.stringify(data));\r\n                if(data['status']==200){\r\n                    this.getDraftQuestion('bulk'); //Show all temp data \r\n                    this.alertService.pop('success', 'Question added successfully in temp');\r\n                  }\r\n                  else\r\n                  {\r\n                    this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                  }\r\n\r\n                  this.loading = false;\r\n                  \r\n              },\r\n              error => {\r\n                  this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                  this.loading = false;\r\n              });\r\n  }\r\n \r\n  hideLoader() \r\n  { \r\n\r\n      document.getElementById('loading-s').style.display = 'none'; \r\n  }\r\n  showLoader() { \r\n      document.getElementById('loading-s').style.display = 'block'; \r\n  }\r\n\r\n  onCheckboxChange(event,val) {\r\n      if(event.target.checked ) {\r\n          this.selectedItems.push(val);\r\n      }\r\n       else {\r\n        this.selectedItems.splice(this.selectedItems.indexOf(val),1);\r\n      }\r\n\r\n  }\r\n\r\n  deleteFoodSelected(){\r\n        this.selectedItems= this.questionArr.filter(_ => _.selected);\r\n            for (var food in this.selectedItems) {\r\n           /* this.foodService.RemoveFood(this.selectedItems[food].Id)\r\n             .subscribe(data =>{\r\n              console.log(data)\r\n             }   \r\n             )  */   \r\n          }\r\n  }\r\n\r\n  deleteOneItem(item_id,type='bulk'){\r\n        var self = this;\r\n        Swal.fire({\r\n            title: 'Are you sure want to delete?',\r\n            text: 'You will not be able to recover this item!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes, delete it!',\r\n            cancelButtonText: 'No, keep it'\r\n          }).then((result) => {\r\n            if (result.value) {\r\n\r\n              self.gcService.deleteDraftQuestion(item_id).subscribe(() => {  \r\n                console.log('deleted draft row'); \r\n                self.getDraftQuestion(type);\r\n                //self.questionArr.splice(self.questionArr.indexOf(item_id),1);\r\n              });\r\n\r\n              if(self.questionArr.length==0){\r\n                this.isProcessed=false;\r\n              }\r\n\r\n               Swal.fire(\r\n                'Deleted!',\r\n                'Your data has been deleted.',\r\n                'success'\r\n              )\r\n             \r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n              //Swal.fire('Cancelled','Your data is safe :)','error')\r\n            }\r\n          })\r\n  }\r\n\r\n  deletItem()\r\n  { \r\n    if(this.selectedItems.length==0){\r\n     Swal.fire('Oh','No item selected to delete :)','error');\r\n     return false;\r\n     }\r\n      var self = this;\r\n      Swal.fire({\r\n          title: 'Are you sure want to delete?',\r\n          text: 'You will not be able to recover this item!',\r\n          icon: 'warning',\r\n          showCancelButton: true,\r\n          confirmButtonText: 'Yes, delete it!',\r\n          cancelButtonText: 'No, keep it'\r\n        }).then((result) => {\r\n          if (result.value) {\r\n\r\n              /*this.selectedItems.forEach(function (value) {\r\n                   self.fileData.forEach(function(arrItem){\r\n                      if (value == arrItem.question) {\r\n                          self.fileData.splice(self.fileData.indexOf(arrItem),1);\r\n                      } \r\n                   });\r\n              });*/\r\n              this.selectedItems.forEach(function (value) { \r\n                   self.questionArr.forEach(function(arrItem){  \r\n                      if (value == arrItem.id) { \r\n                          self.questionArr.splice(self.questionArr.indexOf(arrItem),1);\r\n                          self.gcService.deleteDraftQuestion(value).subscribe(() => {  \r\n                            console.log('deleted draft row'); \r\n                          });\r\n                      } \r\n                   });\r\n              });\r\n\r\n            if(self.questionArr.length==0){\r\n              this.isProcessed=false;\r\n            }\r\n            Swal.fire(\r\n              'Deleted!',\r\n              'Your data has been deleted.',\r\n              'success'\r\n            )\r\n          } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n            Swal.fire(\r\n              'Cancelled',\r\n              'Your data is safe :)',\r\n              'error'\r\n            )\r\n          }\r\n        })\r\n  }\r\n\r\n  reUpload(){\r\n      this.router.navigate(['/general-competition']);\r\n  }\r\n\r\n  onUpdateTemp() \r\n  {      \r\n        this.submitted = true;\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        if(!this.form.value.answer){\r\n          Swal.fire('','Please select correct answer.','error');\r\n          return;\r\n        }\r\n\r\n         if(this.question_type=='text')\r\n          {\r\n            if(this.form.value.question==''){\r\n              Swal.fire('','Please write question.','error');\r\n              return;\r\n            }\r\n\r\n          }\r\n          if(this.croppedImage=='' && (this.question_type=='image' || this.question_type=='text_and_image')){\r\n             Swal.fire('','Please upload question.','error');\r\n              return;\r\n          }\r\n          if(this.form.value.video=='' && (this.question_type=='video' || this.question_type=='text_and_video')){\r\n             Swal.fire('','Please upload question.','error');\r\n              return;\r\n          }\r\n          if(this.form.value.question_text=='' && (this.form.value.question_type=='text_and_image' || this.form.value.question_type=='text_and_video'))\r\n          {\r\n            Swal.fire('','Please write question.','error');\r\n            return;\r\n          }\r\n\r\n        \r\n        this.form.value.created_by=this.created_by; \r\n        this.form.value.created_by=this.created_by; \r\n        this.form.value.video_file  = this.form.value.video;\r\n        this.form.value.isFile=this.isFile;\r\n        this.form.value.isVideo=this.isVideo;\r\n\r\n        this.loading = true;\r\n          /////update in temp////\r\n          this.form.value.id=this.idEdit;\r\n\r\n          //console.log(this.form.value);\r\n          //console.log('---------->>>>>>>>')  \r\n          this.gcService.updateQuestionInDraft(this.form.value)\r\n            .subscribe(\r\n                data => {\r\n                  if(data['status']==200){\r\n                      this.alertService.pop('success', 'Question successfully updated');\r\n                      this.getDraftQuestion('bulk');\r\n                      this.idEdit=false; \r\n                      this.isEdit=false;\r\n                      this.isProcessed=true;\r\n                      this.isSave=true;\r\n                    }\r\n                    else\r\n                    {\r\n                      this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    }\r\n\r\n                    this.loading = false;\r\n                    this.submitted=false\r\n\r\n                    \r\n                },\r\n                error => {\r\n                    this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    this.loading = false;\r\n                    this.submitted=false\r\n\r\n                });\r\n\r\n  }\r\n\r\n  publish() \r\n  {\r\n      Swal.fire({\r\n        title: '',\r\n        text: 'Are you sure want to publish?',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Yes',\r\n        cancelButtonText: 'No'\r\n      }).then((result) => {\r\n        if (result.value) {\r\n\r\n        //////////publish call///\r\n        this.submitted2 = true;\r\n        this.loading2   = true; \r\n        //console.log(this.questionArr);\r\n        this.gcService.publishQuestion(this.questionArr)\r\n            .subscribe(\r\n                data => {\r\n                  if(data['status']==200){\r\n                      this.alertService.pop('success', 'Question added successfully');\r\n                      setTimeout(()=>this.router.navigate(['/general-competition']), 1000);\r\n                      \r\n                    }\r\n                    else\r\n                    {\r\n                      this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    }\r\n\r\n                    this.loading2 = false;\r\n                    \r\n                },\r\n                error => {\r\n                    this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    this.loading2 = false;\r\n                });\r\n          //////////end////////////\r\n         \r\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n          //cancel\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\tonSubmitData() {\r\n        this.submitted = true;\r\n        \r\n        /*if(this.form.value.status){\r\n        this.form.value.status=\"1\";\r\n        }\r\n        else{\r\n        this.form.value.status=\"0\"\r\n        }*/\r\n \t\t    //this.form.value.question=this.value;\r\n        this.loading = true; \r\n        this.gcService.addBulkQuestion(this.fileData)\r\n            .subscribe(\r\n                data => { //console.log('data -- '+JSON.stringify(data));\r\n                \tif(data['status']==200){\r\n                    \tthis.alertService.pop('success', 'Question added successfully');\r\n                    \tsetTimeout(()=>this.router.navigate(['/general-competition']), 1500);\r\n                    }\r\n                    else\r\n                    {\r\n                    \tthis.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    }\r\n\r\n                    this.loading = false;\r\n                    \r\n                },\r\n                error => {\r\n                    this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    this.loading = false;\r\n                    //this.router.navigate(['/general-competition']);\r\n                });\r\n\r\n\r\n    }\r\n\r\n  changedHeading(heading_id){\r\n    this.getCategoryByHeading(heading_id);\r\n    console.log(heading_id);\r\n  }\r\n\r\n  uploadType(upload_type){\r\n    if(upload_type=='single'){\r\n      this.isBulk=false;\r\n      this.isSingle=true;\r\n      this.getDraftQuestion('single');\r\n      this.submitted=false;\r\n\r\n    }\r\n    else{\r\n      this.isBulk=true;\r\n      this.isSingle=false;\r\n      this.getDraftQuestion('bulk');\r\n    }\r\n\r\n    this.croppedImage = '';\r\n    this.question_value='';\r\n    this.isFile=false;\r\n    this.isVideo=false;\r\n    this.question_type=\"text\";\r\n     this.form.patchValue({\r\n      question_type:'text',\r\n    });\r\n    this.goBack();\r\n  }\r\n  public onChange( { editor }: BlurEvent ) {\r\n    this.question_value = editor.getData();\r\n    console.log('dsdsds');\r\n    var html =$(\".ck-content\").html();\r\n    html = html.replace(\"<p>\", \"<p style='\"+this.default_font_size+\"'>\");\r\n    this.question_value =html;\r\n  }\r\n  isOverflown(element) {\r\n    return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;\r\n  }\r\n\r\n  onSaveSingleTemp ()\r\n  {\r\n     //console.log(this.form.value); return ;\r\n    this.submitted = true;\r\n    if (this.form.invalid) {\r\n        return;\r\n    }\r\n\r\n    if(this.question_type=='text')\r\n    {\r\n      if(this.question_value=='' || this.question_value=='<p><br data-cke-filler=\"true\"></p>'){\r\n        Swal.fire('','Please write question.','error');\r\n        return;\r\n      }\r\n\r\n      var qSize=this.isOverflown($(\".ck-content\")[0]);\r\n  \r\n      if(qSize){\r\n        Swal.fire('','Question maximum request length exceeded ','error');\r\n        return;\r\n      }\r\n    }\r\n    if(this.croppedImage=='' && (this.question_type=='image' || this.question_type=='text_and_image')){\r\n       Swal.fire('','Please upload question.','error');\r\n        return;\r\n    }\r\n    if(this.form.value.video=='' && (this.question_type=='video' || this.question_type=='text_and_video')){\r\n       Swal.fire('','Please upload question.','error');\r\n        return;\r\n    }\r\n    if(this.form.value.question_text=='' && (this.form.value.question_type=='text_and_image' || this.form.value.question_type=='text_and_video'))\r\n    {\r\n      Swal.fire('','Please write question.','error');\r\n      return;\r\n    }\r\n\r\n    if(!this.form.value.answer){\r\n      Swal.fire('','Please select correct answer.','error');\r\n      return;\r\n    }\r\n\r\n\r\n    this.form.value.question  =this.question_value;\r\n    this.form.value.created_by=this.created_by; \r\n    this.form.value.video_file  = this.form.value.video;\r\n    console.log('---video print comp');\r\n    console.log(this.form.value);\r\n    this.loading=true;\r\n    this.gcService.addSingleQuestionTemp(this.form.value, this.created_by)\r\n          .subscribe(\r\n              data => { //console.log('data -- '+JSON.stringify(data));\r\n                if(data['status']==200){\r\n                    this.getDraftQuestion('single'); //Show all temp data \r\n                    this.alertService.pop('success', 'Question added successfully in temp');\r\n                  }\r\n                  else\r\n                  {\r\n                    this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                  }\r\n\r\n                  this.loading = false;\r\n                  \r\n              },\r\n              error => {\r\n                  this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                  this.loading = false;\r\n              });\r\n  }\r\n\r\n// Image Video\r\n  uploadVideo(event) {\r\n    const file = (event.target as HTMLInputElement).files[0];\r\n    this.isVideo=true;\r\n    this.form.patchValue({\r\n      video: file\r\n    });\r\n    this.form.get('video').updateValueAndValidity()\r\n\r\n    // File Preview\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      this.preview = reader.result as string;\r\n    }\r\n    reader.readAsDataURL(file)\r\n  }\r\n\r\n\r\n  onUpdateSingleTemp() \r\n  {     \r\n    \r\n        this.submitted = true;\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        if(!this.form.value.answer){\r\n          Swal.fire('','Please select correct answer.','error');\r\n          return;\r\n        }\r\n\r\n        if(this.question_type=='text')\r\n        {\r\n          if(this.question_value=='' || this.question_value=='<p><br data-cke-filler=\"true\"></p>'){\r\n            Swal.fire('','Please write question.','error');\r\n            return;\r\n          }\r\n\r\n          var qSize=this.isOverflown($(\".ck-content\")[0]);\r\n      \r\n          if(qSize){\r\n            Swal.fire('','Question maximum request length exceeded ','error');\r\n            return;\r\n          }\r\n        }\r\n        if(this.croppedImage=='' && (this.question_type=='image' || this.question_type=='text_and_image')){\r\n           Swal.fire('','Please upload question.','error');\r\n            return;\r\n        }\r\n        if((this.form.value.video=='' || this.form.value.video==null) && (this.question_type=='video' || this.question_type=='text_and_video')){\r\n           Swal.fire('','Please upload question.','error');\r\n            return;\r\n        }\r\n        if(this.form.value.question_text=='' && (this.form.value.question_type=='text_and_image' || this.form.value.question_type=='text_and_video'))\r\n        {\r\n          Swal.fire('','Please write question.','error');\r\n          return;\r\n        }\r\n        //console.log(this.form.value);return;\r\n       \r\n        this.form.value.question=this.question_value;\r\n        this.form.value.created_by=this.created_by; \r\n        this.form.value.video_file  = this.form.value.video;\r\n        this.form.value.isFile=this.isFile;\r\n        this.form.value.isVideo=this.isVideo;\r\n\r\n        console.log(this.form.value); \r\n        this.loading = true;\r\n          /////update in temp////\r\n          this.form.value.id=this.idEdit;\r\n          this.gcService.updateSingleQuestionInDraft(this.form.value)\r\n            .subscribe(\r\n                data => {\r\n                  if(data['status']==200){\r\n                      this.alertService.pop('success', 'Question successfully updated');\r\n                      this.getDraftQuestion('single');\r\n                      this.idEdit=false; \r\n                      this.isEdit=false;\r\n                      this.isProcessed=true;\r\n                      this.isSave=true;\r\n                    }\r\n                    else\r\n                    {\r\n                      this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    }\r\n\r\n                    this.loading = false;\r\n                    this.submitted=false\r\n\r\n                    \r\n                },\r\n                error => {\r\n                    this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    this.loading = false;\r\n                    this.submitted=false\r\n\r\n                });\r\n\r\n  }\r\n\r\n  publishSingle() \r\n  {\r\n\r\n      Swal.fire({\r\n        title: '',\r\n        text: 'Are you sure want to publish?',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonText: 'Yes',\r\n        cancelButtonText: 'No'\r\n      }).then((result) => {\r\n        if (result.value) {\r\n\r\n        //////////publish call///\r\n        this.submitted2 = true;\r\n        this.loading2   = true; \r\n        //console.log(this.questionArr);\r\n        this.gcService.publishSingleQuestion(this.questionArr)\r\n            .subscribe(\r\n                data => {\r\n                  if(data['status']==200){\r\n                      this.alertService.pop('success', 'Question added successfully');\r\n                      setTimeout(()=>this.router.navigate(['/general-competition']), 1000);\r\n                      \r\n                    }\r\n                    else\r\n                    {\r\n                      this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    }\r\n\r\n                    this.loading2 = false;\r\n                    \r\n                },\r\n                error => {\r\n                    this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n                    this.loading2 = false;\r\n                });\r\n          //////////end////////////\r\n         \r\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n          //cancel\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n  //image cropping\r\n    imageChangedEvent: any = '';\r\n    croppedImage: any = '';\r\n  \r\n    fileChangeEvent(event: any): void {\r\n    \r\n      if (event.target.files && event.target.files.length > 0) {\r\n        let file = event.target.files[0];\r\n        let img = new Image();\r\n        var name = event.target.files[0].name;\r\n        var ext = name.substring(name.lastIndexOf('.') + 1);\r\n\r\n        if (ext.toLowerCase() != 'jpeg' && ext.toLowerCase() != 'jpg' && ext.toLowerCase() != 'png')\r\n          { \r\n            Swal.fire('','File type should be jpeg, jpg or png format','error');\r\n            return;\r\n          }\r\n          else\r\n          {\r\n            this.imageChangedEvent = event;\r\n            this.showModal = true;\r\n          }\r\n      }\r\n        \r\n    }\r\n    imageCropped(event: ImageCroppedEvent) {\r\n        this.croppedImage = event.base64;\r\n        this.question_value=this.croppedImage;\r\n        this.isFile=true;\r\n        this.form.patchValue({\r\n          question_image: this.croppedImage\r\n        });\r\n\r\n    }\r\n    imageLoaded() {\r\n        /* show cropper */\r\n    }\r\n    cropperReady() {\r\n        /* cropper ready */\r\n    }\r\n    loadImageFailed() {\r\n        /* show message */\r\n        Swal.fire('','Please upload image only','error');\r\n    }\r\n\r\n    closePopup(){\r\n      this.showModal = false;\r\n    }\r\n\r\n  qtChanged(element){\r\n    this.question_type=element;\r\n    this.question_value='';\r\n    this.croppedImage='';\r\n    this.isFile=false;\r\n    this.isVideo=false;\r\n    this.form.patchValue({\r\n      question_text:'',\r\n    });\r\n  }\r\n\r\n\r\ntoggleVideo(event: any) {\r\n    //event.toElement.play();\r\n}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { GeneralCompetitionComponent } from './general-competition.component';\r\nimport { AddGcComponent } from './add/add-gc.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: GeneralCompetitionComponent,\r\n    data: {\r\n      breadcrumb: 'General Competition',\r\n      icon: 'icofont-table bg-c-blue',\r\n      breadcrumb_caption: '',\r\n      status: false\r\n    }\r\n  },\r\n  {\r\n    path: 'add',\r\n    component: AddGcComponent,\r\n    data: {\r\n      breadcrumb: 'Add GC',\r\n      icon: 'icofont-table bg-c-blue',\r\n      breadcrumb_caption: '',\r\n      status: false\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class GeneralCompetitionRoutingModule { }\r\n","import { Component, OnInit, Pipe, Output, EventEmitter } from '@angular/core';\r\nimport { Question } from '../../models/studyexam';\r\nimport { ToasterModule, ToasterService} from 'angular2-toaster'\r\nimport { AuthenticationService } from '../../services';\r\nimport { GcService } from '../../services/gc.service';\r\n\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators,FormControl } from '@angular/forms';\r\nimport Swal from 'sweetalert2/dist/sweetalert2.js';\r\nimport { environment } from '../../../environments/environment'\r\n\r\n@Component({\r\n  selector: 'app-general-competition',\r\n  templateUrl: './general-competition.component.html',\r\n})\r\n\r\n\r\nexport class GeneralCompetitionComponent implements OnInit {\r\n\r\n  page = 1;\r\n  count = 0;\r\n  pageSize = 5;\r\n  pageSizes = [5, 10, 25, 50, 100];\r\n\r\n  form: FormGroup; \r\n  questions:  any;\r\n  s3_url =environment.s3_url;\r\n  private toasterService: ToasterService;\r\n  private quizArr:any=[];\r\n  editData:any=[];\r\n  quiz_temp_id:string;\r\n  isEdit=false;\r\n\r\n  term: string;\r\n  term1: string;\r\n  term2: string;\r\n  config: any;\r\n  filters: any;\r\n  submitted=false;\r\n  loading=false;\r\n  isDesc: boolean = false;\r\n  column: string = 'id';\r\n  direction: number;\r\n  isCompt:boolean=false;\r\n  returnUrl: string;\r\n  created_by:number;\r\n  logUser:any;\r\n  questionArr:any=[];\r\n\r\n  fileData: File = null;\r\n\r\n  //@Output() public found = new EventEmitter<any>();\r\n  found: Array <any> = [];\r\n  quiz_icon_str: string;\r\n  preview: string;\r\n\r\n  masterArr:any=[];\r\n  role_id:any;\r\n\r\n  private headingArr:any=[];\r\n  private categoryArr:any=[];\r\n\r\n  constructor(private fb: FormBuilder,private route: ActivatedRoute,\r\n  private gcService:GcService,\r\n  private router: Router,\r\n  private alertService: ToasterService, \r\n  private authenticationService: AuthenticationService) { \r\n  }\r\n  ngOnInit() \r\n  {\r\n      this.logUser    = this.authenticationService.currentUserValue;\r\n      this.logUser    = JSON.parse(this.logUser);\r\n      this.created_by = this.logUser['user'][0]['id']; \r\n      this.role_id    = this.logUser['user'][0]['role_id'];\r\n\r\n      this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n\r\n      this.term1='';\r\n      this.term2='0';\r\n      this.term='';\r\n      this.getAllQuestion();\r\n      this.getHeading();\r\n\r\n  }\r\n\r\n  public getAllQuestion() {\r\n  const params = this.getRequestParams(this.term1,this.term2, this.page, this.pageSize);\r\n  //console.log(params);\r\n    this.gcService.getAllQuestionByUser(this.created_by,this.role_id,params)\r\n    .subscribe(\r\n    response => { \r\n      //this.questionArr = response['data'];\r\n      //this.count = this.questionArr.length;\r\n      this.questionArr = response['data'];\r\n      this.count = response['count'];\r\n    },\r\n    error => {\r\n        this.alertService.pop('error', 'Something went wrong. Try again later.');\r\n    });\r\n  }\r\n\r\n  get f() { return this.form.controls; }\r\n\r\n  changeStatus(queston: Question) \r\n  {\r\n    console.log(queston);\r\n    if(queston.status==\"0\"){\r\n      queston.status=\"1\";\r\n    }\r\n    else{\r\n      queston.status=\"0\";\r\n    }\r\n   \r\n    this.gcService.update_status(queston)\r\n    .subscribe(\r\n        data => {\r\n          this.alertService.pop('success', 'Question updated successfully');\r\n          this.getAllQuestion();\r\n        },\r\n        error => {\r\n          this.toasterService.pop('error', error);\r\n     });\r\n    \r\n  }\r\n\r\n  getHeading() {\r\n    this.gcService.getHeading()\r\n    .subscribe(\r\n    response => { \r\n      this.headingArr = response;\r\n      \r\n    },\r\n    error => {\r\n       //\r\n    });\r\n  }\r\n\r\n  getCategoryByHeading(heading_id) {\r\n  if(heading_id!=''){\r\n    this.gcService.getCategoryByHeading(heading_id)\r\n    .subscribe(\r\n    response => { \r\n      this.categoryArr = response;\r\n    },\r\n    error => {\r\n       //\r\n    });\r\n    }\r\n  }\r\n  changedHeading(heading_id){\r\n    this.term2=\"0\";\r\n    this.getCategoryByHeading(heading_id);\r\n    this.updateFiltertable();\r\n  }\r\n  changedCategory() {\r\n    this.updateFiltertable();\r\n  }\r\n\r\n  updateFiltertable(){\r\n    this.page = 1;\r\n    this.getAllQuestion();\r\n  }\r\n\r\n  resetPage(event) {\r\n    //this.config['currentPage'] = 1;\r\n  }\r\n\r\n //custom search & pagination\r\n getRequestParams(searchHeader,searchCategory, page, pageSize): any { \r\n    let params = {};\r\n\r\n    if (searchHeader) {\r\n      params[`header_id`] = searchHeader;\r\n    }\r\n    else{\r\n      params[`header_id`] =0;\r\n    }\r\n\r\n    if (searchCategory) {\r\n      params[`category_id`] = searchCategory;\r\n    }\r\n    else{\r\n      params[`category_id`]=0;\r\n    }\r\n    if (page) {\r\n      params[`page`] = page - 1;\r\n    }\r\n\r\n    if (pageSize) {\r\n      params[`size`] = pageSize;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n\r\n handlePageChange(event): void {\r\n    this.page = event;\r\n    this.getAllQuestion();\r\n  }\r\n\r\n  handlePageSizeChange(event): void {\r\n    this.pageSize = event.target.value;\r\n    this.page = 1;\r\n    this.getAllQuestion();\r\n  }\r\n  \r\n  toggleVideo(event: any) {\r\n    //event.toElement.play();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { GeneralCompetitionRoutingModule } from './general-competition-routing.module';\r\nimport { GeneralCompetitionComponent } from './general-competition.component';\r\nimport { AddGcComponent } from './add/add-gc.component';\r\n\r\n\r\n//import { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\n\r\nimport { PipesModule } from \"../../pipes/pipes.module\";\r\n\r\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\r\n\r\n\r\nimport { Pipe, PipeTransform} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser'\r\nimport { ImageCropperModule } from 'ngx-image-cropper';\r\n\r\n@Pipe({ name: 'safeHtml'})\r\nexport class SafeHtmlPipe implements PipeTransform  {\r\n  constructor(private sanitized: DomSanitizer) {}\r\n  transform(value) \r\n  {\r\n    return this.sanitized.bypassSecurityTrustHtml(value);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    GeneralCompetitionRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    Ng2SearchPipeModule,\r\n    NgxPaginationModule,\r\n    PipesModule,\r\n    CKEditorModule,\r\n    ImageCropperModule\r\n  ],\r\n  declarations: [\r\n  GeneralCompetitionComponent,\r\n  AddGcComponent,\r\n  SafeHtmlPipe\r\n\r\n  ]\r\n})\r\nexport class GeneralCompetitionModule { }\r\n"],"sourceRoot":"webpack:///"}