{"version":3,"sources":["./src/app/pages/auth/generatepswd/generatepswd.component.html","./src/app/pages/auth/generatepswd/generatepswd-routing.module.ts","./src/app/pages/auth/generatepswd/generatepswd.component.scss","./src/app/pages/auth/generatepswd/generatepswd.component.ts","./src/app/pages/auth/generatepswd/generatepswd.module.ts"],"names":[],"mappings":"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","file":"generatepswd-generatepswd-module.js","sourcesContent":["export default \"<section class=\\\"login p-fixed d-flex text-center bg-primary1 common-img-bg1\\\">\\r\\n  <div class=\\\"auth-fluid\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <div class=\\\"login-card card-body auth-body text-center\\\">\\r\\n\\r\\n            <div class=\\\"auth-box\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-12 text-center\\\">\\r\\n                  <a [routerLink]=\\\"['/authentication/login']\\\">\\r\\n                    <img src=\\\"assets/images/auth/allam.png\\\" alt=\\\"Allam\\\">\\r\\n                  </a>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-12\\\">\\r\\n                  <h3 class=\\\" txt-primary\\\">{{message_title}}</h3>\\r\\n                </div>\\r\\n              </div>\\r\\n              <hr class=\\\" m-b-20\\\">\\r\\n              \\r\\n              <div class=\\\"row m-b-25 \\\">\\r\\n                <div class=\\\"col-sm-12 col-xs-12\\\">\\r\\n                     <h5 class=\\\" txt-primary email-verified\\\">{{message_body}}</h5>\\r\\n                </div>\\r\\n                <div class=\\\"col-sm-12 col-xs-12\\\">\\r\\n                  <form class=\\\"md-float-material\\\" [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                    <div *ngIf=\\\"formFlag==true\\\">\\r\\n                        <div class=\\\"row\\\" >\\r\\n                          <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"group\\\">\\r\\n                                <div class=\\\"input-group input-tr-br-radius\\\">\\r\\n                                  <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"your password\\\" formControlName=\\\"password\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\r\\n                                  <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.password.errors.required\\\">This field is required.</div>\\r\\n                                  </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                          <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"group\\\">\\r\\n                              <div class=\\\"input-group input-tr-br-radius\\\">\\r\\n                                <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"conf_password\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.conf_password.errors }\\\">\\r\\n                                <div *ngIf=\\\"submitted && f.conf_password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.conf_password.errors.required\\\">This field is required.</div>\\r\\n                                    <div *ngIf=\\\"f.conf_password.errors.confirmedValidator\\\">Password and Confirm Password must be match.</div>\\r\\n                                </div>\\r\\n                               \\r\\n                              </div>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"row m-t-20\\\">\\r\\n                          <div class=\\\"col-md-12\\\">\\r\\n                            <button [disabled]=\\\"loading\\\" class=\\\"btn allam-btn-green btn-md btn-block waves-effect text-center text-white m-b-2\\\">\\r\\n                              <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                              SUBMIT\\r\\n                            </button>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                  </form>\\r\\n                  <hr>\\r\\n                   <div class=\\\"row\\\">\\r\\n                          <div class=\\\"col-md-12\\\">\\r\\n                            <p class=\\\"text-inverse text-center m-b-0\\\">Already verified?\\r\\n\\r\\n                             <a [routerLink]=\\\"['/authentication/login']\\\" class=\\\"text-right f-w-600 text-warning\\\"> Login</a>\\r\\n\\r\\n                            </p>\\r\\n                            \\r\\n                          </div>\\r\\n                        </div>\\r\\n                </div>\\r\\n                \\r\\n              </div>\\r\\n                           \\r\\n            </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\"","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {GeneratepswdComponent} from './generatepswd.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: GeneratepswdComponent,\r\n    data: {\r\n      title: 'Thank You'\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class GeneratepswdRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2F1dGgvZ2VuZXJhdGVwc3dkL2dlbmVyYXRlcHN3ZC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AuthenticationService,UserService } from '../../../services';\r\nimport { ConfirmedValidator } from '../../../confirmed.validator';\r\n\r\n@Component({\r\n  selector: 'app-generatepswd',\r\n  templateUrl: './generatepswd.component.html',\r\n  styleUrls: ['./generatepswd.component.scss']\r\n})\r\nexport class GeneratepswdComponent implements OnInit {\r\n    \r\n  resetForm: FormGroup;\r\n  loading   = false;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  error = '';\r\n  success='';\r\n  resetUser: any = {};\r\n  formFlag=false;\r\n  message_title:string;\r\n  message_body:string;\r\n  id:string;\r\n  constructor(private userService: UserService, private route: ActivatedRoute, private router: Router,private fb: FormBuilder) { }\r\n\r\n  ngOnInit() \r\n  {\r\n  \tthis.id = this.route.snapshot.params['userId'];\r\n  \tthis.id=atob(this.id); //decode base64\r\n  \tthis.verify(this.id);\r\n  \tthis.message_title='';\r\n  \tthis.message_body='';\r\n\r\n    this.resetForm = this.fb.group({\r\n            password: ['', Validators.required],\r\n            conf_password: ['', Validators.required],\r\n        }, { \r\n      validator: ConfirmedValidator('password', 'conf_password')\r\n    });\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n\r\n  }\r\n\r\n    private verify(id) {\r\n         this.userService.verifyCheckEmail(this.id)\r\n            .subscribe(\r\n                data => {\r\n                \tif(data['status']){\r\n\t                \tthis.message_title='Congratulations';\r\n\t  \t\t\t\t\t      this.message_body ='Email verified..Please generate your password.';\r\n                    this.formFlag=true;\r\n                \t}\r\n                \telse{\r\n\t                \tthis.message_title='Oops';\r\n\t  \t\t\t\t\t      this.message_body ='Your email id is already verified or expired.';\r\n                    this.formFlag=false;\r\n                \t}\r\n                    \r\n                },\r\n                error => {\r\n                  this.message_title='Oops';\r\n  \t\t\t\t\t      this.message_body='Something went wrong. please try again later';\r\n                  this.formFlag=false;\r\n\r\n                });\r\n   }\r\n\r\n    get f() { return this.resetForm.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        if (this.resetForm.invalid) {\r\n            return;\r\n        }\r\n \r\n        this.loading = true;\r\n        this.resetUser.password  = this.resetForm.value.password;\r\n        this.resetUser.id=this.id;\r\n       \r\n        this.userService.generatePassword(this.resetUser)\r\n            .subscribe(\r\n                data => {\r\n                    if(data['status'])\r\n                    {\r\n                        this.success = \"Password generated successfully\"\r\n                        this.message_body ='Password generated successfully';\r\n                        this.error='';\r\n                        this.loading = false; \r\n                        this.formFlag=false;\r\n                    }\r\n                    else\r\n                    {\r\n                        this.error = data['msg'];\r\n                        this.loading = false;\r\n                        this.formFlag=false;\r\n                    }\r\n                    \r\n                },\r\n                error => {\r\n                    this.error = \"Something went wrong. Try again later.\";\r\n                    this.loading = false;\r\n                });\r\n\r\n\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GeneratepswdComponent } from './generatepswd.component';\r\nimport { GeneratepswdRoutingModule } from './generatepswd-routing.module';\r\nimport {SharedModule} from '../../../shared/shared.module';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    GeneratepswdRoutingModule,\r\n    SharedModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [GeneratepswdComponent]\r\n})\r\nexport class GeneratepswdModule { }\r\n"],"sourceRoot":"webpack:///"}